{"version":3,"file":"static/js/762.de6f4f0a.chunk.js","mappings":"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","sources":["components/Saved.js","hooks/useCollectionDtl.js"],"sourcesContent":["/*eslint-disable */\r\nimport { useState, useEffect } from 'react';\r\nimport Post from \"./Post\";\r\nimport { useAuthContext } from '../hooks/useAuthContext';\r\nimport { useCollectionDtl } from '../hooks/useCollectionDtl';\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Saved(props) {\r\n    const {user} = useAuthContext()\r\n    let navigate = useNavigate() // 페이지 이동\r\n    const loginUserInfo = useSelector((state) => state.loginUserInfo) // 로그인 유저 정보, (Input.js 에서 초기 셋팅)\r\n    const {documents,error} = useCollectionDtl(\"FeedData\", [\"peopleWhoSave\",\"array-contains\",user.uid] );\r\n    const [docReady, setDocReady] = useState(false)\r\n    let [fade, setFade] = useState('') // Animation Style State\r\n\r\n    // 메인페이지로 이동 + 상단으로 스크롤 이동\r\n    const goMain = () => {\r\n        navigate('/')\r\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    }\r\n\r\n    useEffect(()=>{\r\n        // documents 여부 state 변경\r\n        setDocReady(false)\r\n        console.log(\"user :\",user)\r\n        console.log(\"이메일 :\",user.email)\r\n        console.log(\"닉네임 :\",loginUserInfo.displayName)\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        // documents 여부 state 변경\r\n        setDocReady(true)\r\n        // 날짜, 최근 좋아요 등 기준 잡고 정렬하면 좋을 듯\r\n        console.log(\"저장한 글 :\",documents)\r\n    },[documents])\r\n\r\n    useEffect(()=>{\r\n        setFade(docReady? 'transition-end': '') // 애니메이션 효과\r\n    },[docReady])\r\n\r\n    return (\r\n        <>\r\n            <div className={`liked-feeds transition-start ${fade}`}>\r\n                {\r\n                    docReady && documents != null && documents.length !== 0\r\n                    ? <h2 className='menu-header'>보관함</h2>\r\n                    : null\r\n                }\r\n\r\n                {\r\n                    docReady && documents != null && documents.length !== 0\r\n                    // createUqe --> 생성일시 기준으로 정렬 ( 최신 순이 먼저 오게 )\r\n                    ? documents.sort((a,b)=>b.createdUqe.substring(0,10) - a.createdUqe.substring(0,10)).map((a,i)=>{\r\n                        let post = {...a}\r\n                        return (<Post key={i} post={post}/>) \r\n                    })\r\n                    : <div className=\"no-like\">\r\n                        <p>저장한 게시물이 없어요!</p>\r\n                        <button className=\"lookaround-btn\" onClick={goMain}>\r\n                            피드 둘러보기\r\n                        </button>\r\n                      </div>\r\n                }\r\n\r\n                {\r\n                    docReady && documents != null && documents.length !== 0\r\n                    ?\r\n                    <div className=\"log-go-main-btn-area\">\r\n                        <button className=\"go-main-btn\" onClick={goMain}>\r\n                            돌아가기\r\n                        </button>\r\n                    </div>\r\n                    : null\r\n                }\r\n            </div>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Saved;","/* eslint-disable*/\r\n\r\n// 컬렉션에 접근하여 데이터를 불러오는 기능을 위한 훅\r\n// 메인화면 외에 사용\r\nimport { appFireStore } from \"../firebase/config\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { onSnapshot,collection,query,where,orderBy } from \"firebase/firestore\";\r\n\r\nexport const useCollectionDtl = (transaction, myQuery, order=\"\") => { // myQuery: 파이어스토어 쿼리 사용을 위한 파라미터\r\n\r\n    // documents 데이터 관리, error 관리\r\n    const [documents, setDocuments] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 💛 collection에 변화가 생길때마다 실행합니다. 때문에 항상 최신의 컬랙션 상태를 반환 받을 수 있습니다.\r\n    useEffect(() => {\r\n        let q;\r\n        if(order.length>0){\r\n            q = query(collection(appFireStore, transaction),where(...myQuery),orderBy(\"createdTime\",\"desc\"));\r\n        }\r\n        else{\r\n            q = query(collection(appFireStore, transaction),where(...myQuery));\r\n        }\r\n\r\n        // console.log(q);\r\n\r\n        // onSnapshot: 가장 최근 컬랙션의 내용 반환 \r\n        // unsubscribe: 데이터 수신을 중단(데이터 오는거 기다릴 필요가 없을때 사용.)\r\n        const unsubscribe = onSnapshot(myQuery ? q : (collection(appFireStore, transaction)),\r\n            \r\n            // 응답받은 컬랙션을 snapshot에 저장\r\n            (snapshot) => {\r\n                let result = [];\r\n                // 배열형태로 저장되어있음 => forEach 사용\r\n                snapshot.docs.forEach((doc) => {\r\n                    // document 데이터랑 id 값 push 해주기\r\n                    result.push({ ...doc.data(), id: doc.id });\r\n                })\r\n                // console.log(result);\r\n                setDocuments(result);\r\n                setError(null);\r\n            },\r\n            (error) => {\r\n                setError(error.message);\r\n            });\r\n            \r\n        //💛 외부에서 데이터를 구독하는 경우 clean-up 함수는 useEffect훅을 사용하는 컴포넌트가 마운트 해제될때 실행되어 구독을 종료하게 됩니다.\r\n        return unsubscribe; // clean-up 함수\r\n\r\n    }, [collection])// 매번 실행될 필요가 없고, 컬랙션 변화가 \r\n    return { documents, error }\r\n}"],"names":["props","user","useAuthContext","navigate","useNavigate","loginUserInfo","useSelector","state","useCollectionDtl","uid","documents","error","useState","docReady","setDocReady","fade","setFade","goMain","window","scrollTo","top","behavior","useEffect","console","log","email","displayName","className","length","sort","a","b","createdUqe","substring","map","i","post","onClick","transaction","myQuery","order","setDocuments","setError","q","query","collection","appFireStore","where","orderBy","unsubscribe","onSnapshot","snapshot","result","docs","forEach","doc","push","data","id","message"],"sourceRoot":""}