{"version":3,"file":"static/js/266.6a7e60c5.chunk.js","mappings":"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","sources":["components/ReplyInput.js","components/Detail.js","utils/DateUtil.js","hooks/useFirestore.js"],"sourcesContent":["/*eslint-disable */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useFirestore } from \"../hooks/useFirestore\";\r\nimport { setRmVisible } from \"../store/replySlice\";\r\n\r\n\r\nfunction ReplyInput(props) {\r\n    const { editDocument, response } = useFirestore(\"FeedData\");// 컬렉션 이름 파라미터로 넣어주기\r\n    let dispatch = useDispatch()\r\n    const loginUserInfo = useSelector((state) => state.loginUserInfo) // 로그인 유저 정보, (Input.js 에서 초기 셋팅)\r\n    let [fade, setFade] = useState('') // Animation Style State\r\n    let [newReply, setNewReply] = useState({\r\n        displayName: loginUserInfo.displayName,\r\n        UID: loginUserInfo.UID,\r\n        replyText: '',\r\n    }); // 로그인한 loginUserInfo 에서 받아온 displayName, UID 로 박아놓는다 ( displayName의 경우, user 에서는 초기값으로 들어가 있어서 다름 )\r\n\r\n    const { displayName, replyText } = newReply; // 구조분해 할당 --> 값 추출\r\n\r\n    const onChange = (e) => {\r\n        const { value, name } = e.target; // 우선 e.target 에서 name 과 value 를 추출\r\n        setNewReply({\r\n          ...newReply, // 기존의 input 객체를 복사한 뒤\r\n          [name]: value // name 키를 가진 값을 value 로 설정\r\n        });\r\n    };\r\n\r\n    \r\n    // 폼이 제출되면 실행 [댓글 등록]\r\n    const onSubmit = (e) => {\r\n        e.preventDefault(); // submit시 페이지 reload 방지\r\n        let addReply = newReply // 신규 추가 댓글\r\n        let peopleWhoReply = props.post.peopleWhoReply // 댓글 리스트\r\n        let replies = props.post.replies // 댓글 수\r\n\r\n        console.log(\"신규 댓글 --> \",addReply)\r\n\r\n        // 기존 댓글 리스트에 밀어넣자\r\n        peopleWhoReply.push(addReply)\r\n\r\n        //=========================================================\r\n        // 수정 firebase 태우기, 변경하는 필드를 객체 형식으로 넣어준다\r\n        //=========================================================\r\n        replies++; // 댓글 수 +1\r\n        editDocument({ peopleWhoReply, replies }, props.post.id)\r\n        .then(()=>{\r\n            // 모달 끄고\r\n            dispatch(setRmVisible(false))\r\n        })\r\n    }\r\n\r\n    // 초기 mount 시\r\n    useEffect(()=>{\r\n        document.body.style.overflow = 'hidden'; // 스크롤 제거\r\n        setFade('transition-end')\r\n        console.log(\"props\", props.post);\r\n        console.log(\"댓글 누가 써??\", loginUserInfo.displayName);\r\n        \r\n        // unmount 시 초기화\r\n        return () => {\r\n            document.body.style.overflow = ''; // 스크롤 보이기\r\n        }\r\n    },[])\r\n\r\n    // Esc로 모달 끄기\r\n    window.onkeydown = (e) => {\r\n        if(e.key === 'Escape') {\r\n            console.log('꾸')\r\n        }\r\n    }\r\n    window.onkeyup = (e) => { \r\n        if(e.key === 'Escape') {\r\n            console.log('욱')\r\n            dispatch(setRmVisible(false))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* 뒤에 요소들 덮어서 모달만 보이게 */}\r\n            <div className={`dimmed-layer ${fade}`}/>\r\n\r\n            <div className={`input-area transition-start ${fade}`}>\r\n                <div className=\"form-container\">\r\n                    <form onSubmit={onSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"text\" name=\"replyText\" value={replyText} onChange={onChange} className=\"form-control reply-text-input\" placeholder=\"내용을 입력해 주세요!\" required/>\r\n                        </div>\r\n                        <input type=\"submit\" className=\"post-btn\" value=\"댓글 달기\"/>\r\n                        <div className=\"close-btn\">\r\n                            <CloseBtn onClick={(e)=>{\r\n                                e.preventDefault()\r\n                                dispatch(setRmVisible(false))\r\n                            }}/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReplyInput;\r\n\r\n\r\nconst CloseBtn = (props) => (\r\n    <svg\r\n        // width=\"800px\"\r\n        // height=\"800px\"\r\n        viewBox=\"0 0 16 16\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        fill=\"none\"\r\n        {...props}\r\n    >\r\n    <title>{\"close\"}</title>\r\n    <path\r\n      fill=\"#FFFFFF\"\r\n      d=\"M12.78 4.28a.75.75 0 00-1.06-1.06L8 6.94 4.28 3.22a.75.75 0 00-1.06 1.06L6.94 8l-3.72 3.72a.75.75 0 101.06 1.06L8 9.06l3.72 3.72a.75.75 0 101.06-1.06L9.06 8l3.72-3.72z\"\r\n    />\r\n  </svg>\r\n);","/*eslint-disable */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useFirestore } from \"../hooks/useFirestore\";\r\nimport { useAuthContext } from \"../hooks/useAuthContext\";\r\nimport { useCollection } from '../hooks/useCollection';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ReplyInput from \"./ReplyInput\";\r\nimport { setRmVisible } from \"../store/replySlice\";\r\n\r\nfunction Detail(props) {\r\n  const { editDocument, deleteDocument, response } = useFirestore(\"FeedData\");// 컬렉션 이름 파라미터로 넣어주기\r\n  const {documents,error} = useCollection(\"FeedData\"); // 서버 리얼 데이터\r\n  const { isAuthReady, user } = useAuthContext();\r\n  let [fade, setFade] = useState('') // Animation Style State\r\n  let {uid} = useParams() // 게시물 id 키값 (URL 파라미터)\r\n  let [post, setPost] = useState([]) // 데이터 바인딩할 상세 정보 State\r\n  let [ready, setReady] = useState(false)\r\n  let navigate = useNavigate() // 페이지 이동\r\n  let dispatch = useDispatch()\r\n  const rmVisible = useSelector((state) => state.replyState.rmVisible) // 댓글 모달 표시 여부 ( reply modal )\r\n  const THIS_YEAR = new Date().getFullYear(); // 현재 년도\r\n  const loginUserInfo = useSelector((state) => state.loginUserInfo) // 로그인 유저 정보, (Input.js 에서 초기 셋팅)\r\n\r\n  // 뒤로가기 + 상단으로 스크롤 이동\r\n  const goBack = () => {\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    window.history.back() // 뒤로가기\r\n  }\r\n\r\n  // 상단으로 스크롤 이동\r\n  const scrollTop = () => {\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n  }\r\n\r\n  // 프로필 페이지 이동\r\n  const goProfile = (val) => {\r\n    navigate(`/profile/${val}`)\r\n    scrollTop()\r\n    \r\n    // **새로고침 해버리자**\r\n    window.location.reload();\r\n  }\r\n\r\n  useEffect(()=>{\r\n    // Automatic batching 때문에 타이머 준다\r\n    let timer = setTimeout(() => {setFade('transition-end')}, 100)\r\n    // document.body.style.overflow = 'hidden' // 스크롤 제거 ( 하려했는데 사진 크기 때문에 필요할 수도.. 일단 보류 )\r\n\r\n    // cleanUp Func\r\n    return () => {\r\n      clearTimeout(timer)\r\n      setFade('')\r\n      setReady(false)\r\n      // document.body.style.overflow = ''\r\n    }\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    // documents 받아오면 a.id가 같은 것을 post 에 담아주기\r\n    setPost(documents?.filter((a,i)=> a.id === uid))\r\n  }, [documents])\r\n\r\n  useEffect(()=>{\r\n    // 데이터 받아오는 과정에서 undefined 되는 경우가 있어서 예외처리 해줬다..\r\n    post != undefined && post.length !== 0 ? setReady(true) : setReady(false)\r\n  }, [post])\r\n\r\n\r\n  //============================================== \r\n  // 좋아요 눌린 상태에 따른 버튼 이미지 반환\r\n  //============================================== \r\n  const getLikeStatus = (likeYN) => {\r\n    if (likeYN) {\r\n      return (\r\n        <svg aria-label=\"좋아요 취소\" color=\"#ed4956\" fill=\"#ed4956\"\r\n              height=\"24\" role=\"img\" viewBox=\"0 0 48 48\" width=\"24\">\r\n                <path d=\"M34.6 3.1c-4.5 0-7.9 1.8-10.6 5.6-2.7-3.7-6.1-5.5-10.6-5.5C6 \r\n                 3.1 0 9.6 0 17.6c0 7.3 5.4 12 10.6 16.5.6.5 1.3 1.1 1.9 1.7l2.3 \r\n                 2c4.4 3.9 6.6 5.9 7.6 6.5.5.3 1.1.5 1.6.5s1.1-.2 1.6-.5c1-.6 \r\n                 2.8-2.2 7.8-6.8l2-1.8c.7-.6 1.3-1.2 2-1.7C42.7 29.6 48 \r\n                 25 48 17.6c0-8-6-14.5-13.4-14.5z\">\r\n                </path>\r\n        </svg>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <svg aria-label=\"좋아요\" color=\"#262626\" fill=\"#262626\"\r\n              height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                <path d=\"M16.792 3.904A4.989 4.989 0 0121.5 9.122c0 3.072-2.652 4.959-5.197\r\n                  7.222-2.512 2.243-3.865 3.469-4.303 3.752-.477-.309-2.143-1.823-4.303-3.752C5.141\r\n                  14.072 2.5 12.167 2.5 9.122a4.989 4.989 0 014.708-5.218 4.21 4.21 0 013.675\r\n                    1.941c.84 1.175.98 1.763 1.12 1.763s.278-.588 1.11-1.766a4.17 4.17 0 013.679-1.938m0-2a6.04\r\n                    6.04 0 00-4.797 2.127 6.052 6.052 0 00-4.787-2.127A6.985 6.985 0 00.5 9.122c0 3.61\r\n                      2.55 5.827 5.015 7.97.283.246.569.494.853.747l1.027.918a44.998 44.998 0 003.518 3.018\r\n                      2 2 0 002.174 0 45.263 45.263 0 003.626-3.115l.922-.824c.293-.26.59-.519.885-.774\r\n                        2.334-2.025 4.98-4.32 4.98-7.94a6.985 6.985 0 00-6.708-7.218z\">\r\n                </path>\r\n        </svg>\r\n      )\r\n    }\r\n  }\r\n\r\n  //============================================== \r\n  // 저장 상태에 따른 버튼 이미지 반환\r\n  //============================================== \r\n  const getSaveStatus = (saveYn) => {\r\n    if (saveYn) {\r\n      return (\r\n        <svg aria-label=\"저장 취소\" color=\"#262626\" fill=\"#262626\"\r\n          height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n          <polygon points=\"20 21 12 13.44 4 21 4 3 20 3 20 21\"\r\n            stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n          </polygon>\r\n        </svg>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <svg aria-label=\"저장\" color=\"#262626\" fill=\"#262626\"\r\n          height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n          <polygon fill=\"none\" points=\"20 21 12 13.44 4 21 4 3 20 3 20 21\"\r\n            stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n          </polygon>\r\n        </svg>\r\n      )\r\n    }\r\n  }\r\n\r\n  // 게시물 삭제\r\n  const postDelete = () => {\r\n    if (confirm(\"게시물을 삭제하시겠어요?\")) {\r\n      //=========================  \r\n      // firebase 삭제\r\n      //=========================  \r\n      deleteDocument(post[0].id)\r\n      alert('게시물이 삭제됐어요!')\r\n      goBack() // 이전 페이지로 이동 ( 디테일 페이지에서 보여줄 게 없으니까.. )\r\n    }\r\n  }\r\n\r\n  // 댓글 삭제\r\n  const replyDelete = (reply) => {\r\n    if (confirm(\"이 댓글을 삭제하시겠어요?\")) {\r\n      console.log(\"삭제할 댓글 --> \", reply);\r\n    \r\n      let peopleWhoReply = [...post[0].peopleWhoReply] // 기존 댓글 리스트\r\n      \r\n      // UID + replyText 의 값이 다른 것만 뽑아주기 ( 삭제할 댓글만 제외시키기 )\r\n      peopleWhoReply = peopleWhoReply.filter((val)=>val.UID+val.replyText !== reply.UID+reply.replyText)\r\n      let replies = peopleWhoReply.length; // 댓글 수 맞춰주기\r\n\r\n      console.log(\"댓글 삭제 결과 --> \", peopleWhoReply, replies);\r\n      //=========================  \r\n      // firebase 수정\r\n      //=========================  \r\n      editDocument({ peopleWhoReply, replies }, post[0].id)\r\n    }\r\n  }\r\n\r\n  return (\r\n    ready ?\r\n    <>\r\n    <div className={`all-feeds transition-start ${fade}`}>\r\n      <article className={`Post transition-start ${fade}`}>\r\n        <div className=\"Post-area\">\r\n\r\n          {/* 프로필 영역 */}\r\n          <div className=\"Post-user-area\">\r\n            <div className=\"Post-writer-info\" onClick={()=>goProfile(post[0].UID)}>\r\n              <div className=\"Post-user-profileImage\">\r\n                <img src={post[0].profileImage} alt=\"프로필사진\"/>\r\n              </div>\r\n              <span className=\"Post-user-id\">{post[0].displayName}</span>\r\n            </div>\r\n            {\r\n              // 내 글 --> 삭제버튼 표시\r\n              loginUserInfo.UID === post[0].UID ?\r\n                <div className=\"Post-delete-btn\">\r\n                  <DeleteBtn onClick={postDelete}/>\r\n                </div>\r\n              :\r\n                null\r\n            }\r\n          </div>\r\n\r\n          {/* 이미지 영역 */}\r\n          <div className=\"Post-img\">\r\n            <div className=\"Post-img-bg\">\r\n              <img src={post[0].downloadURL} alt=\"게시물사진\"/>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 버튼 영역 */}\r\n          <div className=\"Post-icon-btn-area\">\r\n            <div className=\"three-btn-area\">\r\n              <button className=\"like-btn\" onClick={(e) => {\r\n                // 좋아요 갯수\r\n                let likes = post[0].likes\r\n                // 좋아요 여부\r\n                let isLiked = post[0].peopleWhoLike.includes(user.uid)\r\n                // 좋아요 누른 사람들\r\n                let peopleWhoLike = [...post[0].peopleWhoLike]\r\n                if (peopleWhoLike.includes(user.uid)) {\r\n                  peopleWhoLike = peopleWhoLike.filter(a => a != user.uid)\r\n                } else {\r\n                  peopleWhoLike.push(user.uid)\r\n                }\r\n                \r\n                if (isLiked) {\r\n                  console.log('좋아요 취소')\r\n                } else {\r\n                  console.log('좋아요')\r\n                }\r\n                console.log('좋아하는 사람들', peopleWhoLike)\r\n\r\n                //=========================================================\r\n                // 수정 firebase 태우기, 변경하는 필드를 객체 형식으로 넣어준다\r\n                //=========================================================\r\n                if (isLiked) {\r\n                  likes--;\r\n                  editDocument({ peopleWhoLike, likes }, post[0].id)\r\n                } else {\r\n                  likes++;\r\n                  editDocument({ peopleWhoLike, likes }, post[0].id)\r\n                }\r\n              }}>\r\n                {/* 받아온 props를 확인해서 좋아요 버튼 반환*/}\r\n                {getLikeStatus(post[0].peopleWhoLike.includes(user.uid))}\r\n              </button>\r\n              \r\n              <button className=\"reply-btn\" onClick={(e) => {\r\n                dispatch(setRmVisible(true))\r\n              }}>\r\n                <svg aria-label=\"댓글쓰기\" color=\"#262626\" fill=\"#262626\"\r\n                height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                  <path d=\"M20.656 17.008a9.993 9.993 0 10-3.59 3.615L22 22z\" fill=\"none\"\r\n                  stroke=\"currentColor\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n                  </path>\r\n                </svg>\r\n              </button>\r\n\r\n              <button className=\"share-btn\" onClick={(e) => {\r\n                alert('보내기 구현중.. ^.^')\r\n              }}>\r\n                <svg aria-label=\"보내기\" color=\"#262626\" fill=\"#262626\"\r\n                height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                  <line fill=\"none\" stroke=\"currentColor\" strokeLinejoin=\"round\"\r\n                    strokeWidth=\"2\" x1=\"22\" x2=\"9.218\" y1=\"3\" y2=\"10.083\">\r\n                  </line>\r\n                  <polygon fill=\"none\" points=\"11.698 20.334 22 3.001 2 3.001 9.218 10.084 11.698 20.334\"\r\n                  stroke=\"currentColor\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n                  </polygon>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n\r\n            {/* 떨어뜨린 곳에 저장 버튼 */}\r\n            <div className=\"one-btn-area\">\r\n              <button className=\"save-btn\" onClick={(e) => {\r\n                // 저장 여부\r\n                let isSaved = post[0].peopleWhoSave.includes(user.uid)\r\n                // 저장한 사람들\r\n                let peopleWhoSave = [...post[0].peopleWhoSave]\r\n                if (peopleWhoSave.includes(user.uid)) {\r\n                  peopleWhoSave = peopleWhoSave.filter(a => a != user.uid)\r\n                } else {\r\n                  peopleWhoSave.push(user.uid)\r\n                }\r\n                \r\n                if (isSaved) {\r\n                  alert('게시물을 보관함에서 삭제할게요!')\r\n                } else {\r\n                  alert('게시물을 보관함에 추가할게요!')\r\n                }\r\n                console.log('저장한 사람들', peopleWhoSave)\r\n\r\n                //=========================================================\r\n                // 수정 firebase 태우기, 변경하는 필드를 객체 형식으로 넣어준다\r\n                //=========================================================\r\n                if (isSaved) {\r\n                  editDocument({ peopleWhoSave }, post[0].id)\r\n                } else {\r\n                  editDocument({ peopleWhoSave }, post[0].id)\r\n                }\r\n              }}>\r\n                {/* 받아온 props를 확인해서 저장 버튼 반환*/}\r\n                {getSaveStatus(post[0].peopleWhoSave.includes(user.uid))}\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 좋아요 Count */}\r\n          <div className=\"Post-like-area\">\r\n            <p className=\"Post-like-count\">\r\n              <b>{post[0].likes}</b>\r\n            </p>\r\n          </div>\r\n\r\n          {/* 게시글 영역 */}\r\n          <div className=\"Post-text-area\">\r\n            <div className=\"Post-text\">\r\n              <div className=\"Post-writer-name\" onClick={()=>{goProfile(post[0].UID)}}>\r\n                <b>{post[0].displayName}</b>\r\n              </div>\r\n              <div className=\"Post-text-postText\">\r\n                {post[0].postText}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 댓글 영역 */}\r\n          {\r\n            post[0].replies > 0 ?\r\n\r\n            <>\r\n              {/* 구분선 */}\r\n              <div className=\"Post-reply-border\"></div>\r\n              {/* 댓글 표시 */}\r\n              <div className=\"Post-reply-area\">\r\n                {\r\n                  post[0].peopleWhoReply.map((a,i)=>{\r\n                    return (\r\n                      <>\r\n                        <div className=\"Post-reply-with-btn\">\r\n                          <div className=\"Post-reply\" key={a.UID+i}>\r\n                            <span className=\"Post-reply-nickname\" onClick={()=>{goProfile(a.UID)}}>\r\n                              <b>{a.displayName}</b>\r\n                            </span>\r\n                            <span className=\"Post-reply-text\">\r\n                              {a.replyText}\r\n                            </span>\r\n                          </div>\r\n\r\n                          {\r\n                            // 내 글 --> 댓글 삭제버튼 표시\r\n                            loginUserInfo.UID === post[0].UID ?\r\n                              <div className=\"reply-delete-btn\">\r\n                                <DeleteReplyBtn onClick={()=>{replyDelete(a)}}/>\r\n                              </div>\r\n                            :\r\n                              null\r\n                          }\r\n                        </div>\r\n                      </>\r\n                    )\r\n                  })\r\n                }\r\n              </div>\r\n            </>\r\n\r\n            : null\r\n          }\r\n\r\n          {/* 작성일자 */}\r\n          <div className=\"post-date\">\r\n            { \r\n              // 작성년도가 올해와 같으면 년도는 표시하지 않기 \r\n              THIS_YEAR === post[0].createdDate.substring(0,4)*1\r\n              ? post[0].createdDate.substring(5,7) + \"월 \" + post[0].createdDate.substring(8,10) + \"일 \" + post[0].createdDate.substring(11)\r\n              : post[0].createdDate.substring(0,4)+\"년 \" + post[0].createdDate.substring(5,7) + \"월 \" + post[0].createdDate.substring(8,10) + \"일 \" + post[0].createdDate.substring(11)\r\n            }\r\n          </div>\r\n        </div>\r\n      </article>\r\n\r\n      <div className=\"detail-btn-area\">\r\n        <button className=\"go-main-btn\" onClick={goBack}>\r\n          돌아가기\r\n        </button>\r\n      </div>\r\n\r\n    </div>\r\n    {/* 댓글 등록 모달 */}\r\n    {\r\n      rmVisible ?\r\n      <ReplyInput post={post[0]}/>\r\n      : null\r\n    }\r\n\r\n    </>\r\n\r\n    : null\r\n  );\r\n}\r\n\r\nexport default Detail;\r\n\r\nconst DeleteBtn = (props) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"#000000\"\r\n    strokeWidth={1.4}\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <polyline points=\"3 6 5 6 21 6\" />\r\n    <path id=\"post-delete-btn\" d=\"M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2\" />\r\n  </svg>\r\n);\r\n\r\nconst DeleteReplyBtn = (props) => (\r\n  <svg\r\n    viewBox=\"0 0 24 24\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    fill=\"none\"\r\n    {...props}\r\n  >\r\n    <path\r\n      id=\"reply-delete-btn\"\r\n      opacity={0.5}\r\n      stroke=\"#000000\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      strokeWidth={1.4}\r\n      d=\"M12 12 7 7m5 5 5 5m-5-5 5-5m-5 5-5 5\"\r\n    />\r\n  </svg>\r\n);","/*eslint-disable */\r\n\r\n/**\r\n * 날짜 출력하는 함수\r\n * format: 포매팅 기호 (/,-,. 같은거)\r\n * addMonth: 월 더하기\r\n * addDay: 일 더하기\r\n * addYear: 년 더하기\r\n*/\r\nfunction today(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day;\r\n}\r\n\r\n/**\r\n * unique 숫자 구하기...\r\n*/\r\nfunction GetUniqueNum(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n    let milliseconds = date.getMilliseconds(); // 밀리초\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day+hour+min+milliseconds;\r\n}\r\n\r\n/**\r\n * 오늘 날짜 + 시간 출력하는 함수\r\n * dateFormat: 날짜 포매팅 기호 (/,-,. 같은거)\r\n * timeFormat: 시간 포매팅 기호 (/,-,. 같은거)\r\n*/\r\nfunction GetCurDayTime(dateFormat,timeFormat) {\r\n    return TimeString(dateFormat,timeFormat,new Date());\r\n}\r\n\r\nfunction TimeString (dateFormat='/',timeFormat=':',date) {\r\n        \r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1; // 1월=0,12월=11이므로 1 더함\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if ((\"\" + month).length === 1) {\r\n        month = \"0\" + month;\r\n    }\r\n    if ((\"\" + day).length === 1) {\r\n        day = \"0\" + day;\r\n    }\r\n    if ((\"\" + hour).length === 1) {\r\n        hour = \"0\" + hour;\r\n    }\r\n    if ((\"\" + min).length === 1) {\r\n        min = \"0\" + min;\r\n    }\r\n\r\n    return (\"\" + year+ dateFormat + month+ dateFormat + day+ \" \" + hour+ timeFormat + min)\r\n}\r\n\r\nexport {today, GetCurDayTime, TimeString, GetUniqueNum } ","/* eslint-disable*/\r\n// 컬렉션을 만들고 데이터를 넘겨주는 작업을 위한 훅\r\nimport { useReducer, useState } from \"react\"\r\nimport { appFireStore, timestamp, storage } from \"../firebase/config\"\r\nimport { addDoc, updateDoc, deleteDoc, doc, collection } from \"firebase/firestore\"\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { GetCurDayTime, GetUniqueNum }  from \"../utils/DateUtil.js\"\r\n\r\n\r\n// 우리가 받을 응답을 저장할 객체 (객체이기 때문에 리듀서로 관리)\r\n// 상태를 관리할 때 error나 isPending을 useReducer로 한번에 관리\r\n\r\n/**\r\n * document : 파이어스토어에 document의 생성을 요청하면 우리가 생성한 document를 반환\r\n *            파이어스토어의 데이터 저장 단위\r\n * isPending: 통신중인지 아닌지 상태\r\n * success : 요청에 대한 응답의 성공 유무\r\n */\r\nconst initState = {\r\n    document: null,\r\n    isPending: false,\r\n    error: null,\r\n    success: false\r\n}\r\n\r\n// 전달 받는 action에 따른 state 업데이트\r\nconst storeReducer = (state, action) => {\r\n    /**case 마다 데이터가 다 달라서 spread operator 안쓰고 그냥 적음... */\r\n    switch (action.type) {\r\n        case 'isPending':\r\n            return { isPending: true, document: null,            success: false, error: null }\r\n        case 'addDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'editDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'deleteDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'error':\r\n            return { isPending: false, document: null,           success: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// transaction: 우리가 데이터를 저장할 컬렉션(폴더)\r\nexport const useFirestore = (transaction) => {\r\n\r\n    // response에 요청에 대한 firestore 의 응답 저장\r\n    // 저장되는 데이터 === 저장 성공 또는 요청한 문서 데이터(객체)\r\n    const [response, dispatch] = useReducer(storeReducer, initState);\r\n    const [imgUrl, setImgUrl] = useState([]);\r\n    // colRef : 만들 컬렉션의 참조 (컬렉션 이름)\r\n\t// 원하는 컬렉션의 참조를 인자로 보내주면 파이어스토어가 자동으로 해당 컬렉션을 생성해줌 \r\n    const colRef = collection(appFireStore, transaction);\r\n\r\n    \r\n    // 컬렉션에 문서를 저장(이미지 저장 시)\r\n    const addDocument = async (doc,pic) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n        // 이미지 업로드 경로 저장\r\n        const storageRef = ref(storage, 'images/'+pic.name );\r\n        const uploadTask = uploadBytesResumable(storageRef, pic);\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n            /*===============================================\r\n             * 이미지 저장\r\n             *===================================================*/\r\n\r\n            uploadTask.on('state_changed', \r\n            (snapshot) => {\r\n                null\r\n            }, \r\n            (error) => {\r\n                console.error('실패사유는', error);\r\n            }, \r\n            () => {\r\n              getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                \r\n                console.log('업로드된 경로는', downloadURL);\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬렉션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe, downloadURL});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');             \r\n              });\r\n            }\r\n          );\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에 문서를 저장(댓글 저장)\r\n    const addComment = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬렉션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에서 문서를 수정\r\n    const editDocument = async (documents,id) => {\r\n        dispatch({ type: \"isPending\" });\r\n        \r\n        // const 임시 = doc(appFireStore,'diary',id);\r\n\r\n        try {\r\n            // // 수정 날짜가 필요할 경우 사용하면 됨\r\n            // const createdTime = timestamp.fromDate(new Date());\r\n            // const createdDate = GetCurDayTime('/',':');\r\n\r\n            // docRef : 참조(컬렉션 이름)\r\n            // updateDoc : 컬렉션에 있는 문서 수정\r\n            // const docRef = await updateDoc(doc(colRef,id),{ ...documents, createdTime,createdDate});\r\n            const docRef = await updateDoc(doc(colRef,id),{ ...documents});\r\n            dispatch({ type: 'editDoc', payload: docRef });\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n        \r\n    // 컬렉션에서 문서를 삭제\r\n    const deleteDocument = async (id) => {\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n            const docRef = await deleteDoc(doc(colRef,id));\r\n            dispatch({ type: 'deleteDoc', payload: docRef });\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n    \r\n    // 유저 최초 저장 ( 회원가입 )\r\n    const addUser = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n            /*===============================================\r\n            * 데이터 저장\r\n            *===================================================*/\r\n            // docRef : 참조(컬렉션 이름)\r\n            // addDoc : 컬렉션에 문서를 추가\r\n            const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n            console.log(docRef);\r\n\r\n            dispatch({ type: 'addDoc', payload: docRef });\r\n            console.log('저장완료');\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n    return { addDocument, addComment, editDocument, deleteDocument, addUser, response }\r\n\r\n}"],"names":["props","useFirestore","editDocument","dispatch","response","useDispatch","loginUserInfo","useSelector","state","useState","fade","setFade","displayName","UID","replyText","newReply","setNewReply","useEffect","document","body","style","overflow","console","log","post","window","onkeydown","e","key","onkeyup","setRmVisible","className","onSubmit","preventDefault","addReply","peopleWhoReply","replies","push","id","then","type","name","value","onChange","target","placeholder","required","CloseBtn","onClick","viewBox","xmlns","fill","d","saveYn","likeYN","deleteDocument","useCollection","documents","error","useAuthContext","user","isAuthReady","uid","useParams","setPost","ready","setReady","navigate","useNavigate","rmVisible","replyState","THIS_YEAR","Date","getFullYear","goBack","scrollTo","top","behavior","history","back","goProfile","val","location","reload","timer","setTimeout","clearTimeout","filter","a","i","undefined","length","src","profileImage","alt","DeleteBtn","confirm","alert","downloadURL","likes","isLiked","peopleWhoLike","includes","color","height","role","width","stroke","strokeLinejoin","strokeWidth","x1","x2","y1","y2","points","isSaved","peopleWhoSave","strokeLinecap","postText","map","DeleteReplyBtn","reply","replyDelete","createdDate","substring","opacity","GetUniqueNum","format","addMonth","addDay","addYear","date","year","month","getMonth","day","getDate","hour","getHours","min","getMinutes","milliseconds","getMilliseconds","setMonth","setDate","setFullYear","slice","GetCurDayTime","dateFormat","timeFormat","TimeString","initState","isPending","success","storeReducer","action","payload","transaction","useReducer","colRef","collection","appFireStore","addDocument","doc","pic","createdTime","timestamp","createdUqe","storageRef","ref","storage","uploadTask","uploadBytesResumable","on","snapshot","getDownloadURL","docRef","addDoc","message","addComment","updateDoc","deleteDoc","addUser"],"sourceRoot":""}