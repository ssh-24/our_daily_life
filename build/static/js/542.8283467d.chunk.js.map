{"version":3,"file":"static/js/542.8283467d.chunk.js","mappings":"+MA+DA,UAxDA,WACI,IAAMA,GAAWC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAK,IACnD,GAA0BC,EAAAA,EAAAA,GAAc,YAAjCC,EAAS,EAATA,UACP,GADsB,EAALC,OACKC,EAAAA,EAAAA,UAAS,KAAG,eAA7BC,EAAI,KAAEC,EAAO,KACdC,GAAWC,EAAAA,EAAAA,MA4Bf,OA1BAC,EAAAA,EAAAA,YAAU,WACNC,QAAQC,IAAI,YAAYd,EAC5B,GAAG,KAEHY,EAAAA,EAAAA,YAAU,WACNC,QAAQC,IAAI,cAAcT,GAC1BI,EAAoB,MAAZJ,GAAoBA,EAAUU,OAAS,EAAG,iBAAkB,IAGpE,IAAIC,EAAQ,GAEH,OAATX,QAAS,IAATA,GAAAA,EAAWY,KAAI,SAACC,EAAEC,GACdH,EAAMI,KAAK,CAACC,IAAMH,EAAEG,IAAKC,KAAOJ,EAAEK,aACtC,IACA,IAAIC,EAEJA,EAAYR,EAAMS,QAAO,SAACC,EAAKC,GAI3B,OAHqD,IAAjDD,EAAIE,WAAU,YAAM,SAAHP,MAAkBM,EAAIN,GAAG,KAC1CK,EAAIN,KAAKO,GAEND,CACX,GAAG,IACHb,QAAQC,IAAI,kCAAUU,GACtBd,GAASmB,EAAAA,EAAAA,GAAYL,GACzB,GAAG,CAACnB,KAGA,+BACI,iBAAKyB,UAAS,qCAAgCtB,GAAO,UAG7CH,EACAA,EAAUY,KAAI,SAACC,EAAEC,GACb,IAAIY,GAAI,UAAOb,GACf,OAAQ,SAAC,IAAI,CAAyBa,KAAMA,GAAzBZ,EAAEnB,EAASe,OAClC,IACE,KAKFf,EAASiB,KAAI,SAACC,EAAEC,GACZ,OAAQ,SAAC,IAAI,CAAWY,KAAMb,GAAXC,EAAE,EACzB,QAKpB,C,2GCrDaf,EAAgB,SAAC4B,GAG1B,OAAkCzB,EAAAA,EAAAA,UAAS,MAAK,eAAzCF,EAAS,KAAE4B,EAAY,KAC9B,GAA0B1B,EAAAA,EAAAA,UAAS,MAAK,eAAjCD,EAAK,KAAE4B,EAAQ,KAgCtB,OA7BAtB,EAAAA,EAAAA,YAAU,WACN,IAAIuB,EACAA,GAAIC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,IAAWC,EAAAA,GAAcN,IAAaO,EAAAA,EAAAA,IAAQ,cAAc,SAK1E,IAAMC,GAAcC,EAAAA,EAAAA,IAAWN,GAG3B,SAACO,GACG,IAAIC,EAAS,GAEbD,EAASE,KAAKC,SAAQ,SAACC,GAEnBH,EAAOvB,MAAK,kBAAK0B,EAAIC,QAAM,IAAEC,GAAIF,EAAIE,KACzC,IAEAf,EAAaU,GACbT,EAAS,KACb,IACA,SAAC5B,GACG4B,EAAS5B,EAAM2C,QACnB,IAGJ,OAAOT,CAEX,GAAG,CAACH,EAAAA,KACG,CAAEhC,UAAAA,EAAWC,MAAAA,EACxB,C","sources":["components/Feeds.js","hooks/useCollection.js"],"sourcesContent":["/*eslint-disable */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Post from \"./Post\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useCollection } from '../hooks/useCollection';\r\nimport { setUserList } from \"../store/searchSlice\";\r\n\r\nfunction Feeds() {\r\n    const postList = useSelector((state) => state.feeds); // 로컬 샘플 데이터\r\n    const {documents,error} = useCollection(\"FeedData\"); // 서버 리얼 데이터\r\n    let [fade, setFade] = useState('') // Animation Style State\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        console.log('Mock Data',postList)\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        console.log('Server Data',documents)\r\n        setFade(documents!= null && documents.length > 0? 'transition-end': '') // 애니메이션 효과\r\n\r\n        // 전체 글의 사용자 정보(UID , displayName)를 받아서 redux store에 넣기 (for 검색 자동완성)\r\n        let users = [] // 전체 유저\r\n        // 있을 때만 돌립시다?\r\n        documents?.map((a,i)=>{\r\n            users.push({UID : a.UID, Name : a.displayName})\r\n        });\r\n        let uniqUsers = [] // 중복 X 유저\r\n        // 중복 제거\r\n        uniqUsers = users.reduce((acc, cur)=>{\r\n            if (acc.findIndex(({ UID }) => UID === cur.UID) === -1) {\r\n                acc.push(cur)\r\n            }\r\n            return acc;\r\n        }, []);\r\n        console.log(\"유저 리스트\", uniqUsers)\r\n        dispatch(setUserList(uniqUsers))\r\n    }, [documents])\r\n\r\n    return (\r\n        <>\r\n            <div className={`all-feeds transition-start ${fade}`}>\r\n                {/* 리얼 데이터 출력 */}\r\n                {\r\n                    documents ? \r\n                    documents.map((a,i) => {\r\n                        let post = {...a}\r\n                        return (<Post key={i+postList.length} post={post}/>) \r\n                    })\r\n                    : null\r\n                }\r\n\r\n                {/* 샘플 데이터 출력 */}\r\n                {\r\n                    postList.map((a,i) => {\r\n                        return (<Post key={i+1} post={a} />)\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Feeds;","/* eslint-disable*/\r\n\r\n// 컬렉션에 접근하여 데이터를 불러오는 기능을 위한 훅\r\n// 메인화면에서 사용\r\nimport { appFireStore } from \"../firebase/config\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { onSnapshot,collection,query,where, orderBy } from \"firebase/firestore\";\r\n\r\nexport const useCollection = (transaction) => {\r\n\r\n    // documents 데이터 관리, error 관리\r\n    const [documents, setDocuments] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 💛 collection에 변화가 생길때마다 실행합니다. 때문에 항상 최신의 컬랙션 상태를 반환 받을 수 있습니다.\r\n    useEffect(() => {\r\n        let q;\r\n            q = query(collection(appFireStore, transaction),orderBy(\"createdTime\",\"desc\"));\r\n            \r\n        // onSnapshot: 가장 최근 컬랙션의 내용 반환 \r\n        // unsubscribe: 데이터 수신을 중단(데이터 오는거 기다릴 필요가 없을때 사용.)\r\n        // const unsubscribe = onSnapshot(myQuery ? q : (collection(appFireStore, transaction)),\r\n        const unsubscribe = onSnapshot(q ,\r\n            \r\n            // 응답받은 컬랙션을 snapshot에 저장\r\n            (snapshot) => {\r\n                let result = [];\r\n                // 배열형태로 저장되어있음 => forEach 사용\r\n                snapshot.docs.forEach((doc) => {\r\n                    // document 데이터랑 id 값 push 해주기\r\n                    result.push({ ...doc.data(), id: doc.id });\r\n                })\r\n\r\n                setDocuments(result);\r\n                setError(null);\r\n            },\r\n            (error) => {\r\n                setError(error.message);\r\n            });\r\n            \r\n        //💛 외부에서 데이터를 구독하는 경우 clean-up 함수는 useEffect훅을 사용하는 컴포넌트가 마운트 해제될때 실행되어 구독을 종료하게 됩니다.\r\n        return unsubscribe; // clean-up 함수\r\n\r\n    }, [collection])// 매번 실행될 필요가 없고, 컬랙션 변화가 \r\n    return { documents, error }\r\n}"],"names":["postList","useSelector","state","feeds","useCollection","documents","error","useState","fade","setFade","dispatch","useDispatch","useEffect","console","log","length","users","map","a","i","push","UID","Name","displayName","uniqUsers","reduce","acc","cur","findIndex","setUserList","className","post","transaction","setDocuments","setError","q","query","collection","appFireStore","orderBy","unsubscribe","onSnapshot","snapshot","result","docs","forEach","doc","data","id","message"],"sourceRoot":""}