{"version":3,"file":"static/js/444.28516ef4.chunk.js","mappings":"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","sources":["components/ProfileInput.js","components/Profile.js","hooks/useCollectionDtl.js","utils/DateUtil.js","hooks/useFirestore.js"],"sourcesContent":["/*eslint-disable */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useAuthContext } from '../hooks/useAuthContext';\r\nimport { useCollectionDtl } from '../hooks/useCollectionDtl';\r\nimport { useFirestore } from \"../hooks/useFirestore\";\r\nimport { setPfVisible } from \"../store/profileSlice\";\r\nimport { Label } from \"@material-ui/icons\";\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { storage } from \"../firebase/config\";\r\nimport Loading from \"../layout/Loading\";\r\n\r\n\r\nfunction ProfileInput(props) {\r\n    const {user} = useAuthContext()\r\n    const { documents : MyFeedInfo } = useCollectionDtl(\"FeedData\",[\"UID\",\"==\",user.uid]) // firebase에 저장된 FeedData 컬렉션에서 가져온다!\r\n    const { documents : UserInfo } = useCollectionDtl(\"UserData\",[\"UID\",\"==\",user.uid]) // firebase에 저장된 UserData 컬렉션에서 가져온다!\r\n    const { editDocument : FeedEdit } = useFirestore(\"FeedData\");// 컬렉션 이름 파라미터로 넣어주기\r\n    const { editDocument : UserEdit } = useFirestore(\"UserData\");// 컬렉션 이름 파라미터로 넣어주기\r\n    const pfVisible = useSelector((state) => state.profileState.pfVisible) // 프로필 변경 모달 표시 여부 ( profile change modal )\r\n    let dispatch = useDispatch()\r\n    let [showImg, setShowImg] = useState('') // 미리보기 이미지\r\n    let [saveImg, setSaveImg] = useState('') // 실물저장 이미지\r\n    let [fade, setFade] = useState('') // Animation Style State\r\n    let [newProfile, setNewProfile] = useState({\r\n        displayName : '',\r\n        profileImage: '',\r\n        profileIntro: '',\r\n    }); // 변경할 profile state\r\n    let [imageChangeYN, setImageChangeYN] = useState(false) // 프로필사진 변경 여부\r\n    let [resultURL, setResultURL] = useState('') // 업로드 결과 이미지 URL\r\n    let [uploadYN, setUploadYN] = useState(false) // 사진 업로드 여부\r\n    let [loading, setLoading] = useState(false) // 로딩 ( 업로드 중에 보여주도록 )\r\n    const { displayName, profileImage, profileIntro } = newProfile; // 구조분해 할당 --> 값 추출\r\n\r\n    // OnChange\r\n    const onChange = (e) => {\r\n        const { value, name } = e.target; // 우선 e.target 에서 name 과 value 를 추출        \r\n        if (e.target.type === 'text') {\r\n            setNewProfile({\r\n              ...newProfile, // 기존의 input 객체를 복사한 뒤\r\n              [name]: value // name 키를 가진 값을 value 로 설정\r\n            });\r\n        }\r\n        else {\r\n            setPreviewImg(e)\r\n        }\r\n    };\r\n\r\n    // 이미지 onChange\r\n    const setPreviewImg = (e) => {\r\n        console.log(\"변경할 파일 -->\", e.target.files[0]);\r\n\r\n        let reader = new FileReader();\r\n        reader.onload = function(e) {\r\n            // 미리보기에 보여줄 state 변경\r\n            setShowImg(e.target.result);\r\n        };\r\n        reader.readAsDataURL(e.target.files[0]);\r\n        setSaveImg(e.target.files[0]);\r\n    }\r\n\r\n\r\n    //=========================================================\r\n    // 폼이 제출되면 실행 [프로필 변경]\r\n    // Feed : displayName, profileImage 변경\r\n    // User : displayName, profileIntro, profileImage 변경\r\n    //=========================================================\r\n    const onSubmit = (e) => {\r\n        e.preventDefault(); // submit시 페이지 reload 방지\r\n        setLoading(true) // 로딩 표시\r\n\r\n        console.log('사진 변경 여부 --> ',imageChangeYN)\r\n        if (imageChangeYN) {\r\n            /* ************************************\r\n            *     프로필 사진 포함 O 변경\r\n            *********************************** */\r\n           // 이미지 업로드 경로 저장 & 가져오기\r\n            const storageRef = ref(storage, 'images/'+profileImage.name );\r\n            const uploadTask = uploadBytesResumable(storageRef, profileImage); // 서버에 업로드\r\n\r\n            // 저장될때까지 시간이 걸리는 듯 함 --> setTimeout 드가자\r\n            setTimeout(() => {\r\n                getDownloadURL(uploadTask.snapshot.ref)\r\n                .then((downloadURL) => {\r\n                    console.log('downloadURL --> ', downloadURL);\r\n                    // 업로드된 경로로 state 변경 --> **useEffect[resultURL] 로 이어진당**\r\n                    setResultURL(downloadURL)\r\n                })\r\n                .catch((err)=> {\r\n                    alert(\"서버에 문제가 발생했어요😥 \\n 다시 시도해주세요!\")\r\n                    // 모달 끄고\r\n                    dispatch(setPfVisible(false))\r\n                })\r\n            }, 2000); // 1초는 부족하당..\r\n        }\r\n        else {\r\n            /* ************************************\r\n            *     프로필 사진 포함 X 변경\r\n            *********************************** */\r\n            if (MyFeedInfo.length !== 0) {\r\n                MyFeedInfo.map((a,i)=>{\r\n                    FeedEdit({ displayName }, a.id)\r\n                })\r\n            }\r\n            UserEdit({ profileIntro, displayName }, UserInfo[0].id)\r\n            .then(()=>{\r\n                // 모달 끄고\r\n                dispatch(setPfVisible(false))\r\n            })\r\n        }\r\n\r\n    }\r\n    //=========================================================\r\n\r\n\r\n\r\n    // 프로필 변경시 URL 변경되면 ( 사진 O )\r\n    useEffect(()=>{\r\n        if (resultURL !== '' && resultURL !== undefined) {\r\n            setNewProfile({\r\n                ...newProfile,\r\n                profileImage: resultURL\r\n            })\r\n\r\n            console.log(\"최종 URL --> \",resultURL)\r\n            setUploadYN(true); // 사진 업로드 여부 추가\r\n        }\r\n    },[resultURL])\r\n\r\n    // 업로드, state 변경 전처리 끝나면 --> **프로필 최종 변경**\r\n    useEffect(()=>{\r\n        if (uploadYN) {\r\n            console.log(\"프로필 변경 ( 사진 O ) --> \",newProfile);\r\n            // 게시물이 있다면\r\n            if (MyFeedInfo.length !== 0) {\r\n                MyFeedInfo.map((a,i)=>{\r\n                    FeedEdit({ displayName, profileImage }, a.id)\r\n                })\r\n            }\r\n            UserEdit({ profileIntro, displayName, profileImage }, UserInfo[0].id)\r\n            .then(()=>{\r\n                // 모달 끄고\r\n                dispatch(setPfVisible(false))\r\n            })\r\n        }\r\n    },[uploadYN])\r\n\r\n    // 초기 mount 시\r\n    useEffect(()=>{\r\n        setFade('transition-end')\r\n        setShowImg('')\r\n        setImageChangeYN(false)\r\n        setUploadYN(false)\r\n        setLoading(false)\r\n    },[])\r\n    \r\n    // 컬렉션 데이터 받아오면 초기화\r\n    useEffect(()=>{\r\n        if (MyFeedInfo != null && UserInfo != null) {\r\n            console.log(\"게시글 : \", MyFeedInfo)\r\n            console.log(\"사용자 : \", UserInfo)\r\n            \r\n            // 받아올 경우에 셋팅\r\n            setNewProfile({\r\n                displayName : UserInfo[0].displayName,\r\n                profileImage: UserInfo[0].profileImage,\r\n                profileIntro: UserInfo[0].profileIntro,\r\n            })\r\n        }\r\n    },[UserInfo, MyFeedInfo])\r\n\r\n    // 프로필 이미지가 변경되면!\r\n    useEffect(()=>{\r\n        setNewProfile({\r\n            ...newProfile, // 기존의 input 객체를 복사한 뒤\r\n            profileImage : saveImg // profileImage에 이미지 추가 (file)\r\n        });\r\n        setImageChangeYN(true)\r\n    },[saveImg])\r\n\r\n    // 모달 on/off 시\r\n    useEffect(()=>{\r\n        setImageChangeYN(false)\r\n        setUploadYN(false)\r\n        setLoading(false)\r\n    },[pfVisible])\r\n\r\n    // Esc로 모달 끄기\r\n    window.onkeydown = (e) => {\r\n        if(e.key === 'Escape') {\r\n            console.log('꾸')\r\n        }\r\n    }\r\n    window.onkeyup = (e) => { \r\n        if(e.key === 'Escape') {\r\n            console.log('욱')\r\n            dispatch(setPfVisible(false))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                // 로딩중\r\n                loading ? \r\n                <Loading/>\r\n                : null\r\n            }\r\n            {/* 뒤에 요소들 덮어서 모달만 보이게 */}\r\n            <div className={`dimmed-layer ${fade}`}/>\r\n\r\n            <div className={`input-area transition-start ${fade}`}>\r\n                <div className=\"form-container\">\r\n                    <form onSubmit={onSubmit}>\r\n                        <div className=\"form-group profile-input\">\r\n                            <Label/>\r\n                            <input accept=\"image/jpeg,image/png,image/heic,image/heif,video/mp4,video/quicktime\" className=\"img-input profile-text-input\" multiple=\"\" type=\"file\" onChange={onChange}/>\r\n                        </div>\r\n                        {/* 이미지 미리보기 */}\r\n                        { showImg.length > 0 && <img src={showImg ?? showImg} alt=\"\" style={{marginBottom : '13px',width : '80%', maxHeight:'200px'}}/>}\r\n                        \r\n                        <div className=\"form-group profile-input\">\r\n                            <Label/>\r\n                            <input type=\"text\" name=\"displayName\" value={displayName} onChange={onChange} className=\"form-control profile-text-input\" placeholder=\"닉네임을 입력해 주세요!\" required/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group profile-input\">\r\n                            <Label/>\r\n                            <input type=\"text\" name=\"profileIntro\" value={profileIntro} onChange={onChange} className=\"form-control profile-text-input\" placeholder=\"소개글을 입력해 주세요!\" required/>\r\n                        </div>\r\n                        <input type=\"submit\" className=\"post-btn\" value=\"저장하기\"/>\r\n                        <div className=\"close-btn\">\r\n                            <CloseBtn onClick={(e)=>{\r\n                                e.preventDefault()\r\n                                dispatch(setPfVisible(false))\r\n                            }}/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileInput;\r\n\r\n\r\nconst CloseBtn = (props) => (\r\n    <svg\r\n        // width=\"800px\"\r\n        // height=\"800px\"\r\n        viewBox=\"0 0 16 16\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        fill=\"none\"\r\n        {...props}\r\n    >\r\n    <title>{\"close\"}</title>\r\n    <path\r\n      fill=\"#FFFFFF\"\r\n      d=\"M12.78 4.28a.75.75 0 00-1.06-1.06L8 6.94 4.28 3.22a.75.75 0 00-1.06 1.06L6.94 8l-3.72 3.72a.75.75 0 101.06 1.06L8 9.06l3.72 3.72a.75.75 0 101.06-1.06L9.06 8l3.72-3.72z\"\r\n    />\r\n  </svg>\r\n);","/*eslint-disable */\r\nimport { useState, useEffect } from 'react';\r\nimport { useAuthContext } from '../hooks/useAuthContext';\r\nimport { useCollectionDtl } from '../hooks/useCollectionDtl';\r\nimport { setVisible } from \"../store/inputSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ProfileInput from './ProfileInput';\r\nimport { setPfVisible } from \"../store/profileSlice\";\r\n\r\nfunction Profile(props) {\r\n    const {user} = useAuthContext()\r\n    let {uid} = useParams() // 사용자 id 키값 (URL 파라미터)\r\n    const {documents : FeedInfo} = useCollectionDtl(\"FeedData\",[\"UID\",\"==\",uid]) // URL 파라미터 --> UID로 프로필 조회\r\n    const {documents : UserInfo} = useCollectionDtl(\"UserData\",[\"UID\",\"==\",uid]) // URL 파라미터 --> UID로 프로필 조회\r\n    const [docReady, setDocReady] = useState(false)\r\n    const loginUserInfo = useSelector((state) => state.loginUserInfo) // 로그인 유저 정보, (Input.js 에서 초기 셋팅)\r\n    let [fade, setFade] = useState('') // Animation Style State\r\n    const pfVisible = useSelector((state) => state.profileState.pfVisible) // 프로필 변경 모달 표시 여부 ( profile change modal )\r\n    let dispatch = useDispatch()\r\n    let navigate = useNavigate() // 페이지 이동\r\n    \r\n    // 프로필 사진 변경\r\n    const profileChange = () => {\r\n        // 프로필 변경 모달 on\r\n        dispatch(setPfVisible(true))\r\n    }\r\n\r\n    // 게시물 등록\r\n    const uploadClicked = () => {\r\n        dispatch(setVisible(true)) // 새 게시물 등록 모달 보이게\r\n    }\r\n\r\n    // 메인페이지로 이동 + 상단으로 스크롤 이동\r\n    const goMain = () => {\r\n        navigate('/')\r\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    }\r\n\r\n    // 게시물 상세 화면으로 이동\r\n    const goDetail = (props) => {\r\n        navigate('/detail/'+props.id) // 게시물 id를 URL 파라미터로 넘긴다 (키값)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        // documents 여부 state 변경\r\n        setDocReady(false)\r\n        // 내 프로필이면\r\n        if (user.uid === uid) {\r\n            console.log(\"user :\",user)\r\n            console.log(\"이메일 :\",user.email)\r\n            console.log(\"최초가입 시 닉네임 (user.displayName) :\",user.displayName)\r\n        }\r\n    },[])\r\n    \r\n    useEffect(()=>{\r\n        // documents 여부 state 변경\r\n        setDocReady(true)\r\n        // 내 프로필이면\r\n        if (user.uid === uid) {\r\n            console.log(\"내 글 :\",FeedInfo)\r\n        } else {\r\n            console.log(\"검색 :\",FeedInfo)\r\n        }\r\n    },[FeedInfo])\r\n\r\n    useEffect(()=>{\r\n        setFade(docReady? 'transition-end': '') // 애니메이션 효과\r\n    },[docReady])\r\n\r\n\r\n    return (\r\n        <>\r\n            <section>\r\n                <div className={`container transition-start ${fade}`}>\r\n                    <div className='container-wrap'>\r\n                        <img className=\"profile-img\" src=\r\n                            {\r\n                                user.uid === uid ?\r\n                                loginUserInfo.profileImage\r\n                                : docReady && UserInfo != null && UserInfo.length !== 0 ?\r\n                                    UserInfo[0].profileImage\r\n                                    : '/assets/profile_default.png'\r\n                             } alt=\"프로필 사진\"/>\r\n                        <div className=\"profile-info\">\r\n                            <h3>{\r\n                                    user.uid === uid ?\r\n                                    user.email\r\n                                    : docReady && FeedInfo != null && FeedInfo.length !== 0 ?\r\n                                        FeedInfo[0].userEmail\r\n                                        : '데이터가 없어요!'\r\n                                }\r\n                            </h3>\r\n                            <h4>@\r\n                                {\r\n                                    user.uid === uid ?\r\n                                    loginUserInfo.displayName\r\n                                    : docReady && FeedInfo != null && FeedInfo.length !== 0 ?\r\n                                        FeedInfo[0].displayName\r\n                                        : '데이터가 없어요!'\r\n                                }\r\n                            </h4>\r\n                            <p>\r\n                                {/* 소개글 내용이 짧을 때 줄어드는 거 막아야 할 듯*/}\r\n                                {\r\n                                    docReady && UserInfo != null && UserInfo.length !== 0 ?\r\n                                    UserInfo[0].profileIntro\r\n                                    : '데이터가 없어요!' \r\n                                }\r\n                            </p>\r\n                            {\r\n                                // 프로필 변경 버튼 --> 내 프로필에서만 표시\r\n                                user.uid === uid ?\r\n                                <button onClick={(e)=>{\r\n                                    e.preventDefault()\r\n                                    profileChange()\r\n                                }}>프로필 변경</button>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={`content-list transition-start ${fade}`}>\r\n                    <div className='content-wrap'>\r\n                        {\r\n                            docReady && FeedInfo != null && FeedInfo.length !== 0\r\n                            ? FeedInfo.map((a,i)=>{\r\n                                return (\r\n                                    // 클릭 시 상세로 이동!\r\n                                    <img key={i} src={a.downloadURL} alt='#' onClick={(e) => goDetail(a)}/>\r\n                                )\r\n                            })\r\n                            : // 유저 검색 --> 게시물 작성한 사람만 되기 때문에 예외처리 X\r\n                              <div className=\"no-post\">\r\n                                <p>작성된 게시물이 없어요!</p>\r\n                                <button className=\"upload-btn-profile\" onClick={uploadClicked}>\r\n                                    게시물 작성하기\r\n                                </button>\r\n                              </div>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"profile-go-main-btn-area\">\r\n                        <button className=\"go-main-btn\" onClick={goMain}>\r\n                            돌아가기\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n            </section>\r\n\r\n            {/* 프로필 변경 모달 */}\r\n            {\r\n                pfVisible ?\r\n                <ProfileInput/>\r\n                : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile;","/* eslint-disable*/\r\n\r\n// 컬렉션에 접근하여 데이터를 불러오는 기능을 위한 훅\r\n// 메인화면 외에 사용\r\nimport { appFireStore } from \"../firebase/config\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { onSnapshot,collection,query,where,orderBy } from \"firebase/firestore\";\r\n\r\nexport const useCollectionDtl = (transaction, myQuery, order=\"\") => { // myQuery: 파이어스토어 쿼리 사용을 위한 파라미터\r\n\r\n    // documents 데이터 관리, error 관리\r\n    const [documents, setDocuments] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 💛 collection에 변화가 생길때마다 실행합니다. 때문에 항상 최신의 컬랙션 상태를 반환 받을 수 있습니다.\r\n    useEffect(() => {\r\n        let q;\r\n        if(order.length>0){\r\n            q = query(collection(appFireStore, transaction),where(...myQuery),orderBy(\"createdTime\",\"desc\"));\r\n        }\r\n        else{\r\n            q = query(collection(appFireStore, transaction),where(...myQuery));\r\n        }\r\n\r\n        console.log(q);\r\n        // onSnapshot: 가장 최근 컬랙션의 내용 반환 \r\n        // unsubscribe: 데이터 수신을 중단(데이터 오는거 기다릴 필요가 없을때 사용.)\r\n        const unsubscribe = onSnapshot(myQuery ? q : (collection(appFireStore, transaction)),\r\n            \r\n            // 응답받은 컬랙션을 snapshot에 저장\r\n            (snapshot) => {\r\n                let result = [];\r\n                // 배열형태로 저장되어있음 => forEach 사용\r\n                snapshot.docs.forEach((doc) => {\r\n                    // document 데이터랑 id 값 push 해주기\r\n                    result.push({ ...doc.data(), id: doc.id });\r\n                })\r\n                console.log(result);\r\n                setDocuments(result);\r\n                setError(null);\r\n            },\r\n            (error) => {\r\n                setError(error.message);\r\n            });\r\n            \r\n        //💛 외부에서 데이터를 구독하는 경우 clean-up 함수는 useEffect훅을 사용하는 컴포넌트가 마운트 해제될때 실행되어 구독을 종료하게 됩니다.\r\n        return unsubscribe; // clean-up 함수\r\n\r\n    }, [collection])// 매번 실행될 필요가 없고, 컬랙션 변화가 \r\n    return { documents, error }\r\n}","/*eslint-disable */\r\n\r\n/**\r\n * 날짜 출력하는 함수\r\n * format: 포매팅 기호 (/,-,. 같은거)\r\n * addMonth: 월 더하기\r\n * addDay: 일 더하기\r\n * addYear: 년 더하기\r\n*/\r\nfunction today(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day;\r\n}\r\n\r\n/**\r\n * unique 숫자 구하기...\r\n*/\r\nfunction GetUniqueNum(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n    let milliseconds = date.getMilliseconds(); // 밀리초\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day+hour+min+milliseconds;\r\n}\r\n\r\n/**\r\n * 오늘 날짜 + 시간 출력하는 함수\r\n * dateFormat: 날짜 포매팅 기호 (/,-,. 같은거)\r\n * timeFormat: 시간 포매팅 기호 (/,-,. 같은거)\r\n*/\r\nfunction GetCurDayTime(dateFormat,timeFormat) {\r\n    return TimeString(dateFormat,timeFormat,new Date());\r\n}\r\n\r\nfunction TimeString (dateFormat='/',timeFormat=':',date) {\r\n        \r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1; // 1월=0,12월=11이므로 1 더함\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if ((\"\" + month).length === 1) {\r\n        month = \"0\" + month;\r\n    }\r\n    if ((\"\" + day).length === 1) {\r\n        day = \"0\" + day;\r\n    }\r\n    if ((\"\" + hour).length === 1) {\r\n        hour = \"0\" + hour;\r\n    }\r\n    if ((\"\" + min).length === 1) {\r\n        min = \"0\" + min;\r\n    }\r\n\r\n    return (\"\" + year+ dateFormat + month+ dateFormat + day+ \" \" + hour+ timeFormat + min)\r\n}\r\n\r\nexport {today, GetCurDayTime, TimeString, GetUniqueNum } ","/* eslint-disable*/\r\n// 컬렉션을 만들고 데이터를 넘겨주는 작업을 위한 훅\r\nimport { useReducer, useState } from \"react\"\r\nimport { appFireStore, timestamp, storage } from \"../firebase/config\"\r\nimport { addDoc, updateDoc, deleteDoc, doc, collection } from \"firebase/firestore\"\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { GetCurDayTime, GetUniqueNum }  from \"../utils/DateUtil.js\"\r\n\r\n\r\n// 우리가 받을 응답을 저장할 객체 (객체이기 때문에 리듀서로 관리)\r\n// 상태를 관리할 때 error나 isPending을 useReducer로 한번에 관리\r\n\r\n/**\r\n * document : 파이어스토어에 document의 생성을 요청하면 우리가 생성한 document를 반환\r\n *            파이어스토어의 데이터 저장 단위\r\n * isPending: 통신중인지 아닌지 상태\r\n * success : 요청에 대한 응답의 성공 유무\r\n */\r\nconst initState = {\r\n    document: null,\r\n    isPending: false,\r\n    error: null,\r\n    success: false\r\n}\r\n\r\n// 전달 받는 action에 따른 state 업데이트\r\nconst storeReducer = (state, action) => {\r\n    /**case 마다 데이터가 다 달라서 spread operator 안쓰고 그냥 적음... */\r\n    switch (action.type) {\r\n        case 'isPending':\r\n            return { isPending: true, document: null,            success: false, error: null }\r\n        case 'addDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'editDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'deleteDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'error':\r\n            return { isPending: false, document: null,           success: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// transaction: 우리가 데이터를 저장할 컬렉션(폴더)\r\nexport const useFirestore = (transaction) => {\r\n\r\n    // response에 요청에 대한 firestore 의 응답 저장\r\n    // 저장되는 데이터 === 저장 성공 또는 요청한 문서 데이터(객체)\r\n    const [response, dispatch] = useReducer(storeReducer, initState);\r\n    const [imgUrl, setImgUrl] = useState([]);\r\n    // colRef : 만들 컬렉션의 참조 (컬렉션 이름)\r\n\t// 원하는 컬렉션의 참조를 인자로 보내주면 파이어스토어가 자동으로 해당 컬렉션을 생성해줌 \r\n    const colRef = collection(appFireStore, transaction);\r\n\r\n    \r\n    // 컬렉션에 문서를 저장(이미지 저장 시)\r\n    const addDocument = async (doc,pic) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n        // 이미지 업로드 경로 저장\r\n        const storageRef = ref(storage, 'images/'+pic.name );\r\n        const uploadTask = uploadBytesResumable(storageRef, pic);\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n            /*===============================================\r\n             * 이미지 저장\r\n             *===================================================*/\r\n\r\n            uploadTask.on('state_changed', \r\n            (snapshot) => {\r\n                null\r\n            }, \r\n            (error) => {\r\n                console.error('실패사유는', error);\r\n            }, \r\n            () => {\r\n              getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                \r\n                console.log('업로드된 경로는', downloadURL);\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬렉션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe, downloadURL});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');             \r\n              });\r\n            }\r\n          );\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에 문서를 저장(댓글 저장)\r\n    const addComment = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬렉션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에서 문서를 수정\r\n    const editDocument = async (documents,id) => {\r\n        dispatch({ type: \"isPending\" });\r\n        \r\n        // const 임시 = doc(appFireStore,'diary',id);\r\n\r\n        try {\r\n            // // 수정 날짜가 필요할 경우 사용하면 됨\r\n            // const createdTime = timestamp.fromDate(new Date());\r\n            // const createdDate = GetCurDayTime('/',':');\r\n\r\n            // docRef : 참조(컬렉션 이름)\r\n            // updateDoc : 컬렉션에 있는 문서 수정\r\n            // const docRef = await updateDoc(doc(colRef,id),{ ...documents, createdTime,createdDate});\r\n            const docRef = await updateDoc(doc(colRef,id),{ ...documents});\r\n            dispatch({ type: 'editDoc', payload: docRef });\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n        \r\n    // 컬렉션에서 문서를 삭제\r\n    const deleteDocument = async (id) => {\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n            const docRef = await deleteDoc(doc(colRef,id));\r\n            dispatch({ type: 'deleteDoc', payload: docRef });\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n    \r\n    // 유저 최초 저장 ( 회원가입 )\r\n    const addUser = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n            /*===============================================\r\n            * 데이터 저장\r\n            *===================================================*/\r\n            // docRef : 참조(컬렉션 이름)\r\n            // addDoc : 컬렉션에 문서를 추가\r\n            const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n            console.log(docRef);\r\n\r\n            dispatch({ type: 'addDoc', payload: docRef });\r\n            console.log('저장완료');\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n    return { addDocument, addComment, editDocument, deleteDocument, addUser, response }\r\n\r\n}"],"names":["props","user","useAuthContext","MyFeedInfo","useCollectionDtl","uid","documents","UserInfo","FeedEdit","useFirestore","editDocument","UserEdit","pfVisible","useSelector","state","profileState","dispatch","useDispatch","useState","showImg","setShowImg","saveImg","setSaveImg","fade","setFade","displayName","profileImage","profileIntro","newProfile","setNewProfile","imageChangeYN","setImageChangeYN","resultURL","setResultURL","uploadYN","setUploadYN","loading","setLoading","onChange","e","target","value","name","type","setPreviewImg","console","log","files","reader","FileReader","onload","result","readAsDataURL","useEffect","undefined","length","map","a","i","id","then","setPfVisible","window","onkeydown","key","onkeyup","Loading","className","onSubmit","preventDefault","storageRef","ref","storage","uploadTask","uploadBytesResumable","setTimeout","getDownloadURL","snapshot","downloadURL","catch","err","alert","Label","accept","multiple","src","alt","style","marginBottom","width","maxHeight","placeholder","required","CloseBtn","onClick","viewBox","xmlns","fill","d","useParams","FeedInfo","docReady","setDocReady","loginUserInfo","navigate","useNavigate","email","userEmail","goDetail","setVisible","scrollTo","top","behavior","transaction","myQuery","order","setDocuments","error","setError","q","query","collection","appFireStore","where","orderBy","unsubscribe","onSnapshot","docs","forEach","doc","push","data","message","GetUniqueNum","format","addMonth","addDay","addYear","date","Date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","min","getMinutes","milliseconds","getMilliseconds","setMonth","setDate","setFullYear","slice","GetCurDayTime","dateFormat","timeFormat","TimeString","initState","document","isPending","success","storeReducer","action","payload","useReducer","response","colRef","addDocument","pic","createdTime","timestamp","createdDate","createdUqe","on","docRef","addDoc","addComment","updateDoc","deleteDocument","deleteDoc","addUser"],"sourceRoot":""}