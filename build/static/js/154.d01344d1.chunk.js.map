{"version":3,"file":"static/js/154.d01344d1.chunk.js","mappings":"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","sources":["components/Signup.js","hooks/useSignup.js","components/Signin.js","hooks/useLogin.js","components/Start.js","utils/DateUtil.js","hooks/useFirestore.js"],"sourcesContent":["/*eslint-disable */\r\nimport React from \"react\"\r\nimport {useState} from \"react\"\r\nimport {useSignup} from '../hooks/useSignup'\r\nimport Logo from \"../assets/images/logo.png\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { setIsSigned } from \"../store/signedSlice\"\r\n\r\nfunction Signup(){\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [displayName, setDisplayName] = useState(\"\")\r\n    const {error, isPending, signup} = useSignup() // 만든 js 파일을 훅처럼 사용할 수 있음\r\n    const isSigned = useSelector((state) => state.isSigned) // 계정 보유 여부\r\n    let dispatch = useDispatch()\r\n\r\n    const goToSignin = () => {\r\n        dispatch(setIsSigned(!isSigned))\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        const inputData = {\r\n            type: e.target.type,\r\n            value: e.target.value\r\n        };\r\n\r\n        // 인풋 타입에 따라 state 값을 변경\r\n        if (inputData.type === \"email\") {\r\n            setEmail(inputData.value);\r\n        } else if (inputData.type === \"password\") {\r\n            setPassword(inputData.value);\r\n        } else if (inputData.type === \"text\") {\r\n            setDisplayName(inputData.value);\r\n        }\r\n    }\r\n\r\n    // 폼이 제출되면 실행\r\n    const onSubmit = (e) => {\r\n        e.preventDefault(); // submit시 페이지 reload 방지\r\n\r\n        if(password.length < 6){\r\n            alert('6자리 비밀번호를 입력해주세요');\r\n        }else if(isNaN(password)){\r\n            alert('비밀번호는 숫자로 입력해주세요');\r\n        }else{\r\n            signup(email,password,displayName);\r\n            // console.log(email,password,displayName);\r\n        }\r\n\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className=\"login-area\">\r\n                <div className=\"logo_div\">\r\n                    <img alt=\"Our Daily Life\" className=\"logo_img\" src={Logo}/>\r\n                </div>\r\n\r\n                <div className=\"form-container\">\r\n                    <form onSubmit={onSubmit}>\r\n                        <h2>시작하기</h2>\r\n                        <p>우리의 일상을 함께 공유해봐요:)</p>\r\n                        {/* 이메일, 성명, 닉네임, 비밀번호, 회원가입 버튼 */}\r\n                        <div className=\"form-group\">\r\n                            <input type=\"email\" value={email} onChange={onChange} className=\"form-control\" name=\"Email\" placeholder=\"이메일 주소\" required/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"text\" value={displayName} onChange={onChange} className=\"form-control\" name=\"DisplayName\" placeholder=\"사용자 이름\" required/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"password\" value={password} onChange={onChange} className=\"form-control\" name=\"Password\" placeholder=\"비밀번호\" required/>\r\n                        </div>\r\n\r\n                        <input type=\"submit\" className=\"signup-btn\" value=\"회원가입\"/>\r\n                    </form>\r\n\r\n                    <div className=\"another-area\">\r\n                        <p>계정이 있어요!</p>\r\n                        <button className=\"another-btn\" onClick={goToSignin}>로그인하기</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Signup;","/* eslint-disable*/\r\n\r\nimport { useState } from \"react\"\r\nimport {appAuth} from '../firebase/config';\r\nimport {createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';\r\nimport { useAuthContext } from \"./useAuthContext\";\r\nimport { useFirestore } from \"../hooks/useFirestore\";\r\n\r\nexport const useSignup = () => {\r\n    // 회원가입 시 에러가 발생했을 때 에러 정보를 저장함\r\n    const [error,setError] = useState(null);\r\n\r\n    // 현재 서버와 통신 상태를 저장\r\n    const [isPending,setIsPending] = useState(false);\r\n    \r\n    // 인증과 관련된 훅\r\n    const {dispatch} = useAuthContext();\r\n\r\n\r\n    /**************************************************************\r\n     * 회원 저장\r\n     **************************************************************/\r\n    // 컬렉션 이름 파라미터로 넣어주기, 저장소에 해당 이름의 컬렉션으로 저장됨\r\n    const { addUser, response } = useFirestore(\"UserData\");\r\n\r\n    // 회원가입\r\n    const signup = (email, password, displayName) =>{\r\n        console.log('인자로 받아옴??',displayName);\r\n        setError(null); // 아직 에러가 없음...\r\n        setIsPending(true); // 통신을 진행중입니다...\r\n\r\n        // 회원가입 진행\r\n        createUserWithEmailAndPassword(appAuth, email, password)\r\n        .then((userCredential)=>{\r\n            const user = userCredential.user;\r\n            console.log('회원가입user: ',user);\r\n\r\n            if(!user){\r\n                throw new Error('회원가입에 실패했습니다.');\r\n            }\r\n\r\n            // 회원가입이 완료되면 가입된 회원에 닉네임 저장시키기\r\n            updateProfile(appAuth.currentUser,{displayName})\r\n            .then(()=>{\r\n                dispatch({type: 'login', payload:user})\r\n                setError(null); //에러없다고 넣어주고\r\n                setIsPending(false); //통신끊어주기\r\n            }).catch((err) => {\r\n                setError(err.message);\r\n                setIsPending(false);\r\n                console.log(err.message);\r\n            }).finally(()=>{\r\n                let UID = user.uid;\r\n                let profileIntro = '안녕하세요! 저의 프로필 페이지를 방문해주셔서 감사합니다'; // 기본 프로필 소개 글 추가\r\n                let profileImage = '/assets/profile_default.png'; // 최초가입 시 디폴트 이미지 추가\r\n\r\n                // 유저 최초 저장 시 컬렉션 생성\r\n                addUser({email, password, UID, profileIntro, profileImage});\r\n            })\r\n\r\n        })\r\n        .catch((err) => {\r\n            setError(err.message);\r\n            setIsPending(false);\r\n            console.log(err.message);\r\n        })\r\n\r\n\r\n    }\r\n    return {error, isPending,signup}\r\n}","/*eslint-disable */\r\nimport React from \"react\"\r\nimport {useState} from \"react\"\r\nimport {useLogin} from '../hooks/useLogin'\r\nimport Logo from \"../assets/images/logo.png\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { setIsSigned } from \"../store/signedSlice\"\r\n\r\nfunction Signin(){\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const {error,isPending,login} = useLogin() // 만든 js 파일을 훅처럼 사용할 수 있음\r\n    const isSigned = useSelector((state) => state.isSigned) // 계정 보유 여부\r\n    let dispatch = useDispatch()\r\n\r\n    const goToSignup = () => {\r\n        dispatch(setIsSigned(!isSigned))\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        const inputData = {\r\n            type: e.target.type,\r\n            value: e.target.value\r\n        };\r\n\r\n        // 인풋 타입에 따라 state 값을 변경\r\n        if (inputData.type === \"email\") {\r\n            setEmail(inputData.value);\r\n        } else if (inputData.type === \"password\") {\r\n            setPassword(inputData.value);\r\n        }\r\n    }\r\n\r\n    // 폼이 제출되면 실행\r\n    const onSubmit = (e) => {\r\n        e.preventDefault(); // submit시 페이지 reload 방지\r\n        login(email, password);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className=\"login-area\">\r\n                <div className=\"logo_div\">\r\n                    <img alt=\"Our Daily Life\" className=\"logo_img\" src={Logo}/>\r\n                </div>\r\n\r\n                <div className=\"form-container\">\r\n                    <form onSubmit={onSubmit}>\r\n                        <h2>시작하기</h2>\r\n                        <p>우리의 일상을 함께 공유해봐요:)</p>\r\n                        {/* 이메일, 비밀번호, 로그인 버튼 */}\r\n                        <div className=\"form-group\">\r\n                            <input type=\"email\" value={email} onChange={onChange} className=\"form-control\" name=\"Email\" placeholder=\"이메일 주소\" required/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"password\" value={password} onChange={onChange} className=\"form-control\" name=\"Password\" placeholder=\"비밀번호\" required/>\r\n                        </div>\r\n\r\n                        <input type=\"submit\" className=\"signup-btn\" value=\"로그인\"/>\r\n                    </form>\r\n\r\n                    <div className=\"another-area\">\r\n                        <p>계정이 없어요!</p>\r\n                        <button className=\"another-btn\" onClick={goToSignup}>가입하기</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Signin;","/* eslint-disable*/\r\n\r\nimport { useState } from \"react\"\r\nimport {appAuth} from '../firebase/config';\r\nimport {signInWithEmailAndPassword} from 'firebase/auth';\r\nimport { useAuthContext } from \"./useAuthContext\";\r\n\r\nexport const useLogin = () => {\r\n    // 로그인 시 에러가 발생했을 때 에러 정보를 저장함\r\n    const [error,setError] = useState(null);\r\n\r\n    // 현재 서버와 통신 상태를 저장\r\n    const [isPending,setIsPending] = useState(false);\r\n    \r\n    // 인증과 관련된 훅\r\n    const {dispatch} = useAuthContext();\r\n\r\n    // 로그인\r\n    const login = (email, password) =>{\r\n        setError(null); // 아직 에러가 없음...\r\n        setIsPending(true); // 통신을 진행중입니다...\r\n\r\n        // 로그인 진행\r\n        signInWithEmailAndPassword(appAuth, email, password)\r\n        .then((userCredential)=>{\r\n            const user = userCredential.user;\r\n            dispatch({type:'login', payload:user });\r\n            console.log(user);\r\n            setError(null); //에러없다고 넣어주고\r\n            setIsPending(false); //통신끊어주기\r\n\r\n            if(!user){\r\n                throw new Error('로그인에 실패했습니다.');\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            setError(err.message);\r\n            setIsPending(false);\r\n            console.log(err.message);\r\n        })\r\n\r\n    }\r\n    return {error, isPending,login}\r\n}","/*eslint-disable */\r\nimport {appAuth} from '../firebase/config';\r\nimport {useState,useEffect} from \"react\";\r\nimport Signup from \"./Signup\";\r\nimport Signin from \"./Signin\"\r\nimport { useAuthContext } from \"../hooks/useAuthContext\";\r\nimport { useSelector } from \"react-redux\"\r\n\r\n\r\nfunction Start() {\r\n    const { isAuthReady, user } = useAuthContext();\r\n    const isSigned = useSelector((state) => state.isSigned) // 계정 보유 여부\r\n\r\n    return (\r\n       <>\r\n        {isSigned === true ? <Signin/> : <Signup/>}\r\n       </>\r\n    );\r\n}\r\n\r\nexport default Start;","/*eslint-disable */\r\n\r\n/**\r\n * 날짜 출력하는 함수\r\n * format: 포매팅 기호 (/,-,. 같은거)\r\n * addMonth: 월 더하기\r\n * addDay: 일 더하기\r\n * addYear: 년 더하기\r\n*/\r\nfunction today(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day;\r\n}\r\n\r\n/**\r\n * unique 숫자 구하기...\r\n*/\r\nfunction GetUniqueNum(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n    let milliseconds = date.getMilliseconds(); // 밀리초\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day+hour+min+milliseconds;\r\n}\r\n\r\n/**\r\n * 오늘 날짜 + 시간 출력하는 함수\r\n * dateFormat: 날짜 포매팅 기호 (/,-,. 같은거)\r\n * timeFormat: 시간 포매팅 기호 (/,-,. 같은거)\r\n*/\r\nfunction GetCurDayTime(dateFormat,timeFormat) {\r\n    return TimeString(dateFormat,timeFormat,new Date());\r\n}\r\n\r\nfunction TimeString (dateFormat='/',timeFormat=':',date) {\r\n        \r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1; // 1월=0,12월=11이므로 1 더함\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if ((\"\" + month).length === 1) {\r\n        month = \"0\" + month;\r\n    }\r\n    if ((\"\" + day).length === 1) {\r\n        day = \"0\" + day;\r\n    }\r\n    if ((\"\" + hour).length === 1) {\r\n        hour = \"0\" + hour;\r\n    }\r\n    if ((\"\" + min).length === 1) {\r\n        min = \"0\" + min;\r\n    }\r\n\r\n    return (\"\" + year+ dateFormat + month+ dateFormat + day+ \" \" + hour+ timeFormat + min)\r\n}\r\n\r\nexport {today, GetCurDayTime, TimeString, GetUniqueNum } ","/* eslint-disable*/\r\n// 컬렉션을 만들고 데이터를 넘겨주는 작업을 위한 훅\r\nimport { useReducer,useState } from \"react\"\r\nimport { appFireStore, timestamp, storage } from \"../firebase/config\"\r\nimport { addDoc,updateDoc, deleteDoc,doc, collection } from \"firebase/firestore\"\r\nimport { ref, uploadBytesResumable,getDownloadURL } from \"firebase/storage\";\r\nimport  {GetCurDayTime ,GetUniqueNum }  from \"../utils/DateUtil.js\"\r\n\r\n// 우리가 받을 응답을 저장할 객체 (객체이기 때문에 리듀서로 관리)\r\n// 상태를 관리할 때 error나 isPending을 useReducer로 한번에 관리\r\n\r\n/**\r\n * document : 파이어스토어에 document의 생성을 요청하면 우리가 생성한 document를 반환\r\n *      파이어스토어의 데이터 저장 단위\r\n * isPending: 통신중인지 아닌지 상태\r\n * success : 요청에 대한 응답의 성공 유무\r\n */\r\nconst initState = {\r\n    document: null,\r\n    isPending: false,\r\n    error: null,\r\n    success: false\r\n}\r\n\r\n// 전달 받는 action에 따른 state 업데이트\r\nconst storeReducer = (state, action) => {\r\n    /**case 마다 데이터가 다 달라서 spread operator 안쓰고 그냥 적음... */\r\n    switch (action.type) {\r\n        case 'isPending':\r\n            return { isPending: true, document: null,            success: false, error: null }\r\n        case 'addDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'editDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'deleteDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'error':\r\n            return { isPending: false, document: null,           success: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// transaction: 우리가 데이터를 저장할 컬렉션(폴더)\r\nexport const useFirestore = (transaction) => {\r\n\r\n    // response에 요청에 대한 firestore 의 응답 저장\r\n    // 저장되는 데이터 === 저장 성공 또는 요청한 문서 데이터(객체)\r\n    const [response, dispatch] = useReducer(storeReducer, initState);\r\n    const [imgUrl,setImgUrl] = useState([]);\r\n    // colRef : 만들 컬랙션의 참조 (컬랙션 이름)\r\n\t\t// 원하는 컬렉션의 참조를 인자로 보내주면 파이어스토어가 자동으로 해당 컬렉션을 생성해줌 \r\n    const colRef = collection(appFireStore, transaction);\r\n\r\n    \r\n    // 컬렉션에 문서를 저장(이미지 저장 시)\r\n    const addDocument = async (doc,pic) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n        // 이미지 업로드 경로 저장\r\n        const storageRef = ref(storage, 'images/'+pic.name );\r\n        const uploadTask = uploadBytesResumable(storageRef, pic);\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n            /*===============================================\r\n             * 이미지 저장\r\n             *===================================================*/\r\n\r\n            uploadTask.on('state_changed', \r\n            (snapshot) => {\r\n                null\r\n            }, \r\n            (error) => {\r\n                console.error('실패사유는', error);\r\n            }, \r\n            () => {\r\n              getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                \r\n                console.log('업로드된 경로는', downloadURL);\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬랙션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe, downloadURL});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n              });\r\n            }\r\n          );\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에 문서를 저장(댓글 저장)\r\n    const addComment = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬랙션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에서 문서를 수정\r\n    const editDocument = async (documents,id) => {\r\n        dispatch({ type: \"isPending\" });\r\n        \r\n        // const 임시 = doc(appFireStore,'diary',id);\r\n\r\n        try {\r\n            // // 수정 날짜가 필요할 경우 사용하면 됨\r\n            // const createdTime = timestamp.fromDate(new Date());\r\n            // const createdDate = GetCurDayTime('/',':');\r\n\r\n            // docRef : 참조(컬랙션 이름)\r\n            // updateDoc : 컬렉션에 있는 문서 수정\r\n            // const docRef = await updateDoc(doc(colRef,id),{ ...documents, createdTime,createdDate});\r\n            const docRef = await updateDoc(doc(colRef,id),{ ...documents});\r\n            dispatch({ type: 'editDoc', payload: docRef });\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n        \r\n    // 컬렉션에서 문서를 삭제\r\n    const deleteDocument = async (id) => {\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n            const docRef = await deleteDoc(doc(colRef,id));\r\n            dispatch({ type: 'deleteDoc', payload: docRef });\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n    \r\n    // 유저 최초 저장\r\n    const addUser = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬랙션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n    return { addDocument,addComment, editDocument, deleteDocument, addUser, response }\r\n\r\n}"],"names":["useState","email","setEmail","password","setPassword","displayName","setDisplayName","error","setError","isPending","setIsPending","dispatch","useAuthContext","useFirestore","addUser","response","signup","console","log","createUserWithEmailAndPassword","appAuth","then","userCredential","user","Error","updateProfile","type","payload","catch","err","message","finally","UID","uid","profileIntro","profileImage","useSignup","isSigned","useSelector","state","useDispatch","onChange","e","inputData","target","value","className","alt","src","Logo","onSubmit","preventDefault","length","alert","isNaN","name","placeholder","required","onClick","setIsSigned","login","signInWithEmailAndPassword","useLogin","isAuthReady","GetUniqueNum","format","addMonth","addDay","addYear","date","Date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","min","getMinutes","milliseconds","getMilliseconds","setMonth","setDate","setFullYear","slice","GetCurDayTime","dateFormat","timeFormat","TimeString","initState","document","success","storeReducer","action","transaction","useReducer","colRef","collection","appFireStore","addDocument","doc","pic","createdTime","timestamp","createdDate","createdUqe","storageRef","ref","storage","uploadTask","uploadBytesResumable","on","snapshot","getDownloadURL","downloadURL","docRef","addDoc","addComment","editDocument","documents","id","updateDoc","deleteDocument","deleteDoc"],"sourceRoot":""}