{"version":3,"file":"static/js/86.08677d59.chunk.js","mappings":"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","sources":["components/Input.js","hooks/useCollectionDtl.js","utils/DateUtil.js","hooks/useFirestore.js"],"sourcesContent":["/*eslint-disable */\r\nimport { useEffect, useState, useRef} from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useAuthContext } from \"../hooks/useAuthContext\";\r\nimport { useCollectionDtl } from '../hooks/useCollectionDtl';\r\nimport { setUserEmail, setUID, setPostText, setVisible, setDisplayName } from \"../store/inputSlice\";\r\nimport { useFirestore } from \"../hooks/useFirestore\";\r\nimport { setLoginUserInfo } from \"../store/loginUserSlice\";\r\n\r\nfunction Input(){\r\n    const { isAuthReady, user } = useAuthContext();\r\n    const {documents,error} = useCollectionDtl(\"UserData\",[\"UID\",\"==\",user.uid]) // firebase에 저장된 UserData 컬렉션에서 가져온다!\r\n    const inputState = useSelector((state) => state.inputState)\r\n    const visible = useSelector((state) => state.inputState.visible) // input 모달 여부\r\n    let dispatch = useDispatch()\r\n    let [showImg, setShowImg] = useState('') // 미리보기 이미지\r\n    let [saveImg, setSaveImg] = useState('') // 실물저장 이미지\r\n    let [fade, setFade] = useState('') // Animation Style State\r\n    const targetRef = useRef(\"\")\r\n\r\n    // 글 등록 모달 on --> 스크롤 X\r\n    // 이전 작성 정보 --> 글, 미리보기 이미지 초기화\r\n    useEffect(()=>{\r\n        document.body.style.overflow = visible? 'hidden' : '';\r\n        dispatch(setPostText(''))\r\n        setShowImg('')\r\n        setFade(visible? 'transition-end': '') // 애니메이션 효과\r\n    },[visible])\r\n\r\n    useEffect(()=>{\r\n        // mount, 초기로딩 완료 --> 작성자 정보 미리 셋팅\r\n        dispatch(setUserEmail(user.email))\r\n        dispatch(setUID(user.uid))\r\n        dispatch(setDisplayName(user.displayName))\r\n\r\n        // unmount 시 초기화\r\n        return () => {\r\n            dispatch(setVisible(false))\r\n            dispatch(setPostText(''))\r\n            dispatch(setUserEmail(''))\r\n            dispatch(setUID(''))\r\n        }\r\n    },[])\r\n\r\n    // 로그인 사용자 정보 받아와서, Redux State에도 저장한다\r\n    useEffect(()=>{\r\n        console.log(\"로그인 유저(firebase)|\",documents)\r\n        if (documents != null && documents.length !== 0) {\r\n            let obj = documents[0]\r\n            delete obj.createdTime // createdTime이 객체 형태라서 non-serializable value 에러가 나서 지워줬다\r\n            dispatch(setLoginUserInfo(obj)) // redux state에 저장\r\n        }\r\n    },[documents])\r\n    \r\n    window.onkeydown = (e) => {\r\n        if(e.key === 'Escape') {\r\n            console.log('딸')\r\n        }\r\n    }\r\n    window.onkeyup = (e) => { \r\n        if(e.key === 'Escape') {\r\n            console.log('깍')\r\n            dispatch(setVisible(false))\r\n        }\r\n    }\r\n\r\n    /**************************************************************\r\n     * 글 저장\r\n     **************************************************************/\r\n    // 컬렉션 이름 파라미터로 넣어주기, 저장소에 해당 이름의 컬렉션으로 저장됨\r\n    const { addDocument, response } = useFirestore(\"FeedData\");\r\n    \r\n    // 인풋 타입에 따라 state 값을 변경\r\n    const onChange = (e) => {\r\n        const inputData = {\r\n            type: e.target.type,\r\n            value: e.target.value\r\n        }\r\n        if (inputData.type === 'text') {\r\n            dispatch(setPostText(inputData.value))\r\n        } else {\r\n            // 이미지 미리보기, 실물파일 저장\r\n            setPreviewImg(e)\r\n        }\r\n    }\r\n\r\n    // 이미지 value 값 넣기\r\n    // 이미지 미리보기\r\n    const setPreviewImg = (e) => {\r\n        console.log(\"저장할 파일 -->\", e.target.files[0]);\r\n\r\n        let reader = new FileReader();\r\n        reader.onload = function(e) {\r\n            // 미리보기에 보여줄 state 변경\r\n            setShowImg(e.target.result);\r\n        };\r\n        reader.readAsDataURL(e.target.files[0]);\r\n        setSaveImg(e.target.files[0]);\r\n    }\r\n\r\n    // 폼이 제출되면 실행 [게시물 등록]\r\n    const onSubmit = (e) => {\r\n        e.preventDefault(); // submit시 페이지 reload 방지\r\n        let savedData = {...inputState}\r\n        // 저장 시 없는 데이터 추가로 넣어주기\r\n        savedData.peopleWhoLike = []\r\n        savedData.likes = 0\r\n        savedData.peopleWhoReply = []\r\n        savedData.replies = 0\r\n        // 회원의 프로필 사진 정보를 가져와서 넣어줌, 프로필 사진은 회원가입(useSignup) 시, 기본 이미지로 등록된다\r\n        savedData.profileImage = documents[0].profileImage\r\n\r\n        console.log(\"게시물 등록 --> \",savedData);\r\n\r\n        // [FireBase 저장 로직]\r\n        addDocument( savedData ,saveImg) // 저장\r\n        dispatch(setVisible(false))\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {\r\n                visible?\r\n                <>\r\n                    {/* 뒤에 요소들 덮어서 모달만 보이게 */}\r\n                    <div className={`dimmed-layer ${fade}`}/>\r\n\r\n                    <div ref={targetRef} className={`input-area transition-start ${fade}`}>\r\n                        <div className=\"form-container\">\r\n                            <form onSubmit={onSubmit}>\r\n                                <h3>새 게시물 만들기</h3>\r\n                                <div className=\"form-group\">\r\n                                    <input accept=\"image/jpeg,image/png,image/heic,image/heif,video/mp4,video/quicktime\" className=\"img-input\" multiple=\"\" type=\"file\" onChange={onChange} required/>\r\n                                </div>\r\n\r\n                                {/* 이미지 미리보기 */}\r\n                                { showImg.length > 0 && <img src={showImg ?? showImg} alt=\"\" style={{marginBottom : '13px',width : '80%', maxHeight:'200px'}}/>}\r\n                                \r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" value={inputState.postText} onChange={onChange} className=\"form-control\" name=\"postText\" placeholder=\"문구 입력\" required/>\r\n                                </div>\r\n                                <input type=\"submit\" className=\"post-btn\" value=\"공유하기\"/>\r\n                                <div className=\"close-btn\">\r\n                                    <CloseBtn onClick={(e)=>{\r\n                                        e.preventDefault()\r\n                                        dispatch(setVisible(false))\r\n                                    }}/>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n                : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Input;\r\n\r\n\r\nconst CloseBtn = (props) => (\r\n    <svg\r\n        // width=\"800px\"\r\n        // height=\"800px\"\r\n        viewBox=\"0 0 16 16\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        fill=\"none\"\r\n        {...props}\r\n    >\r\n    <title>{\"close\"}</title>\r\n    <path\r\n      fill=\"#FFFFFF\"\r\n      d=\"M12.78 4.28a.75.75 0 00-1.06-1.06L8 6.94 4.28 3.22a.75.75 0 00-1.06 1.06L6.94 8l-3.72 3.72a.75.75 0 101.06 1.06L8 9.06l3.72 3.72a.75.75 0 101.06-1.06L9.06 8l3.72-3.72z\"\r\n    />\r\n  </svg>\r\n);","/* eslint-disable*/\r\n\r\n// 컬렉션에 접근하여 데이터를 불러오는 기능을 위한 훅\r\n// 메인화면 외에 사용\r\nimport { appFireStore } from \"../firebase/config\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { onSnapshot,collection,query,where,orderBy } from \"firebase/firestore\";\r\n\r\nexport const useCollectionDtl = (transaction, myQuery, order=\"\") => { // myQuery: 파이어스토어 쿼리 사용을 위한 파라미터\r\n\r\n    // documents 데이터 관리, error 관리\r\n    const [documents, setDocuments] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 💛 collection에 변화가 생길때마다 실행합니다. 때문에 항상 최신의 컬랙션 상태를 반환 받을 수 있습니다.\r\n    useEffect(() => {\r\n        let q;\r\n        if(order.length>0){\r\n            q = query(collection(appFireStore, transaction),where(...myQuery),orderBy(\"createdTime\",\"desc\"));\r\n        }\r\n        else{\r\n            q = query(collection(appFireStore, transaction),where(...myQuery));\r\n        }\r\n\r\n        console.log(q);\r\n        // onSnapshot: 가장 최근 컬랙션의 내용 반환 \r\n        // unsubscribe: 데이터 수신을 중단(데이터 오는거 기다릴 필요가 없을때 사용.)\r\n        const unsubscribe = onSnapshot(myQuery ? q : (collection(appFireStore, transaction)),\r\n            \r\n            // 응답받은 컬랙션을 snapshot에 저장\r\n            (snapshot) => {\r\n                let result = [];\r\n                // 배열형태로 저장되어있음 => forEach 사용\r\n                snapshot.docs.forEach((doc) => {\r\n                    // document 데이터랑 id 값 push 해주기\r\n                    result.push({ ...doc.data(), id: doc.id });\r\n                })\r\n                console.log(result);\r\n                setDocuments(result);\r\n                setError(null);\r\n            },\r\n            (error) => {\r\n                setError(error.message);\r\n            });\r\n            \r\n        //💛 외부에서 데이터를 구독하는 경우 clean-up 함수는 useEffect훅을 사용하는 컴포넌트가 마운트 해제될때 실행되어 구독을 종료하게 됩니다.\r\n        return unsubscribe; // clean-up 함수\r\n\r\n    }, [collection])// 매번 실행될 필요가 없고, 컬랙션 변화가 \r\n    return { documents, error }\r\n}","/*eslint-disable */\r\n\r\n/**\r\n * 날짜 출력하는 함수\r\n * format: 포매팅 기호 (/,-,. 같은거)\r\n * addMonth: 월 더하기\r\n * addDay: 일 더하기\r\n * addYear: 년 더하기\r\n*/\r\nfunction today(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day;\r\n}\r\n\r\n/**\r\n * unique 숫자 구하기...\r\n*/\r\nfunction GetUniqueNum(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n    let milliseconds = date.getMilliseconds(); // 밀리초\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day+hour+min+milliseconds;\r\n}\r\n\r\n/**\r\n * 오늘 날짜 + 시간 출력하는 함수\r\n * dateFormat: 날짜 포매팅 기호 (/,-,. 같은거)\r\n * timeFormat: 시간 포매팅 기호 (/,-,. 같은거)\r\n*/\r\nfunction GetCurDayTime(dateFormat,timeFormat) {\r\n    return TimeString(dateFormat,timeFormat,new Date());\r\n}\r\n\r\nfunction TimeString (dateFormat='/',timeFormat=':',date) {\r\n        \r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1; // 1월=0,12월=11이므로 1 더함\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if ((\"\" + month).length === 1) {\r\n        month = \"0\" + month;\r\n    }\r\n    if ((\"\" + day).length === 1) {\r\n        day = \"0\" + day;\r\n    }\r\n    if ((\"\" + hour).length === 1) {\r\n        hour = \"0\" + hour;\r\n    }\r\n    if ((\"\" + min).length === 1) {\r\n        min = \"0\" + min;\r\n    }\r\n\r\n    return (\"\" + year+ dateFormat + month+ dateFormat + day+ \" \" + hour+ timeFormat + min)\r\n}\r\n\r\nexport {today, GetCurDayTime, TimeString, GetUniqueNum } ","/* eslint-disable*/\r\n// 컬렉션을 만들고 데이터를 넘겨주는 작업을 위한 훅\r\nimport { useReducer, useState } from \"react\"\r\nimport { appFireStore, timestamp, storage } from \"../firebase/config\"\r\nimport { addDoc, updateDoc, deleteDoc, doc, collection } from \"firebase/firestore\"\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { GetCurDayTime, GetUniqueNum }  from \"../utils/DateUtil.js\"\r\n\r\n\r\n// 우리가 받을 응답을 저장할 객체 (객체이기 때문에 리듀서로 관리)\r\n// 상태를 관리할 때 error나 isPending을 useReducer로 한번에 관리\r\n\r\n/**\r\n * document : 파이어스토어에 document의 생성을 요청하면 우리가 생성한 document를 반환\r\n *            파이어스토어의 데이터 저장 단위\r\n * isPending: 통신중인지 아닌지 상태\r\n * success : 요청에 대한 응답의 성공 유무\r\n */\r\nconst initState = {\r\n    document: null,\r\n    isPending: false,\r\n    error: null,\r\n    success: false\r\n}\r\n\r\n// 전달 받는 action에 따른 state 업데이트\r\nconst storeReducer = (state, action) => {\r\n    /**case 마다 데이터가 다 달라서 spread operator 안쓰고 그냥 적음... */\r\n    switch (action.type) {\r\n        case 'isPending':\r\n            return { isPending: true, document: null,            success: false, error: null }\r\n        case 'addDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'editDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'deleteDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'error':\r\n            return { isPending: false, document: null,           success: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// transaction: 우리가 데이터를 저장할 컬렉션(폴더)\r\nexport const useFirestore = (transaction) => {\r\n\r\n    // response에 요청에 대한 firestore 의 응답 저장\r\n    // 저장되는 데이터 === 저장 성공 또는 요청한 문서 데이터(객체)\r\n    const [response, dispatch] = useReducer(storeReducer, initState);\r\n    const [imgUrl, setImgUrl] = useState([]);\r\n    // colRef : 만들 컬렉션의 참조 (컬렉션 이름)\r\n\t// 원하는 컬렉션의 참조를 인자로 보내주면 파이어스토어가 자동으로 해당 컬렉션을 생성해줌 \r\n    const colRef = collection(appFireStore, transaction);\r\n\r\n    \r\n    // 컬렉션에 문서를 저장(이미지 저장 시)\r\n    const addDocument = async (doc,pic) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n        // 이미지 업로드 경로 저장\r\n        const storageRef = ref(storage, 'images/'+pic.name );\r\n        const uploadTask = uploadBytesResumable(storageRef, pic);\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n            /*===============================================\r\n             * 이미지 저장\r\n             *===================================================*/\r\n\r\n            uploadTask.on('state_changed', \r\n            (snapshot) => {\r\n                null\r\n            }, \r\n            (error) => {\r\n                console.error('실패사유는', error);\r\n            }, \r\n            () => {\r\n              getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                \r\n                console.log('업로드된 경로는', downloadURL);\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬렉션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe, downloadURL});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');             \r\n              });\r\n            }\r\n          );\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에 문서를 저장(댓글 저장)\r\n    const addComment = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬렉션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에서 문서를 수정\r\n    const editDocument = async (documents,id) => {\r\n        dispatch({ type: \"isPending\" });\r\n        \r\n        // const 임시 = doc(appFireStore,'diary',id);\r\n\r\n        try {\r\n            // // 수정 날짜가 필요할 경우 사용하면 됨\r\n            // const createdTime = timestamp.fromDate(new Date());\r\n            // const createdDate = GetCurDayTime('/',':');\r\n\r\n            // docRef : 참조(컬렉션 이름)\r\n            // updateDoc : 컬렉션에 있는 문서 수정\r\n            // const docRef = await updateDoc(doc(colRef,id),{ ...documents, createdTime,createdDate});\r\n            const docRef = await updateDoc(doc(colRef,id),{ ...documents});\r\n            dispatch({ type: 'editDoc', payload: docRef });\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n        \r\n    // 컬렉션에서 문서를 삭제\r\n    const deleteDocument = async (id) => {\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n            const docRef = await deleteDoc(doc(colRef,id));\r\n            dispatch({ type: 'deleteDoc', payload: docRef });\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n    \r\n    // 유저 최초 저장 ( 회원가입 )\r\n    const addUser = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n            /*===============================================\r\n            * 데이터 저장\r\n            *===================================================*/\r\n            // docRef : 참조(컬렉션 이름)\r\n            // addDoc : 컬렉션에 문서를 추가\r\n            const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n            console.log(docRef);\r\n\r\n            dispatch({ type: 'addDoc', payload: docRef });\r\n            console.log('저장완료');\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n    return { addDocument, addComment, editDocument, deleteDocument, addUser, response }\r\n\r\n}"],"names":["useAuthContext","user","isAuthReady","useCollectionDtl","uid","documents","inputState","error","useSelector","state","visible","dispatch","useDispatch","useState","showImg","setShowImg","saveImg","setSaveImg","fade","setFade","targetRef","useRef","useEffect","document","body","style","overflow","setPostText","setUserEmail","email","setUID","setDisplayName","displayName","setVisible","console","log","length","obj","createdTime","setLoginUserInfo","window","onkeydown","e","key","onkeyup","useFirestore","addDocument","onChange","response","inputData","type","target","value","setPreviewImg","files","reader","FileReader","onload","result","readAsDataURL","className","ref","onSubmit","preventDefault","savedData","peopleWhoLike","likes","peopleWhoReply","replies","profileImage","accept","multiple","required","src","alt","marginBottom","width","maxHeight","postText","name","placeholder","CloseBtn","onClick","props","viewBox","xmlns","fill","d","transaction","myQuery","order","setDocuments","setError","q","query","collection","appFireStore","where","orderBy","unsubscribe","onSnapshot","snapshot","docs","forEach","doc","push","data","id","message","GetUniqueNum","format","addMonth","addDay","addYear","date","Date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","min","getMinutes","milliseconds","getMilliseconds","setMonth","setDate","setFullYear","slice","GetCurDayTime","dateFormat","timeFormat","TimeString","initState","isPending","success","storeReducer","action","payload","useReducer","colRef","pic","timestamp","createdDate","createdUqe","storageRef","storage","uploadTask","uploadBytesResumable","on","getDownloadURL","then","downloadURL","docRef","addDoc","addComment","editDocument","updateDoc","deleteDocument","deleteDoc","addUser"],"sourceRoot":""}