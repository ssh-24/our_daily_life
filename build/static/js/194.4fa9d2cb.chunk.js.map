{"version":3,"file":"static/js/194.4fa9d2cb.chunk.js","mappings":"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","sources":["components/Profile.js","hooks/useCollectionDtl.js"],"sourcesContent":["/*eslint-disable */\r\nimport { useState, useEffect } from 'react';\r\nimport { useAuthContext } from '../hooks/useAuthContext';\r\nimport { useCollectionDtl } from '../hooks/useCollectionDtl';\r\nimport { setVisible } from \"../store/inputSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Profile(props) {\r\n    const {user} = useAuthContext()\r\n    let {uid} = useParams() // 사용자 id 키값 (URL 파라미터)\r\n    const {documents,error} = useCollectionDtl(\"FeedData\",[\"UID\",\"==\",uid]) // URL 파라미터 --> UID로 프로필 조회\r\n    const [docReady, setDocReady] = useState(false)\r\n    const loginUserInfo = useSelector((state) => state.loginUserInfo) // 로그인 유저 정보, (Input.js 에서 초기 셋팅)\r\n    let [fade, setFade] = useState('') // Animation Style State\r\n    let dispatch = useDispatch()\r\n    let navigate = useNavigate() // 페이지 이동\r\n    \r\n    // 프로필 사진 변경\r\n    const profileChange = () => {\r\n        // 로직 구현해야 함..\r\n        window.blur()\r\n        alert(\"기능 구현 중 ^.^\")\r\n    }\r\n\r\n    // 게시물 등록\r\n    const uploadClicked = () => {\r\n        dispatch(setVisible(true)) // 새 게시물 등록 모달 보이게\r\n    }\r\n\r\n    // 메인페이지로 이동 + 상단으로 스크롤 이동\r\n    const goMain = () => {\r\n        navigate('/')\r\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    }\r\n\r\n    // 게시물 상세 화면으로 이동\r\n    const goDetail = (props) => {\r\n        navigate('/detail/'+props.id) // 게시물 id를 URL 파라미터로 넘긴다 (키값)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        // documents 여부 state 변경\r\n        setDocReady(false)\r\n        // 내 프로필이면\r\n        if (user.uid === uid) {\r\n            console.log(\"user :\",user)\r\n            console.log(\"이메일 :\",user.email)\r\n            console.log(\"닉네임 :\",user.displayName)\r\n        }\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        // documents 여부 state 변경\r\n        setDocReady(true)\r\n        // 내 프로필이면\r\n        if (user.uid === uid) {\r\n            console.log(\"내 글 :\",documents)\r\n        } else {\r\n            console.log(\"검색 :\",documents)\r\n        }\r\n    },[documents])\r\n\r\n    useEffect(()=>{\r\n        setFade(docReady? 'transition-end': '') // 애니메이션 효과\r\n    },[docReady])\r\n\r\n\r\n    return (\r\n        <>\r\n            <section>\r\n                <div className={`container transition-start ${fade}`}>\r\n                    <div className='container-wrap'>\r\n                        <img className=\"profile-img\" src={\r\n                            user.uid === uid ?\r\n                             loginUserInfo.profileImage\r\n                             : docReady && documents != null && documents.length !== 0 ?\r\n                                documents[0].profileImage\r\n                                : '/assets/profile_default.png'\r\n                             } alt=\"프로필 사진\"/>\r\n                        <div className=\"profile-info\">\r\n                            <h3>{\r\n                                user.uid === uid ?\r\n                                user.email\r\n                                : docReady && documents != null && documents.length !== 0 ?\r\n                                    documents[0].userEmail\r\n                                    : '데이터가 없어요!'\r\n                            }</h3>\r\n                            <h4>@{\r\n                                user.uid === uid ?\r\n                                user.displayName\r\n                                : docReady && documents != null && documents.length !== 0 ?\r\n                                    documents[0].displayName\r\n                                    : '데이터가 없어요!'\r\n                            }</h4>\r\n                            <p>\r\n                                {/* 소개글 내용이 짧을 때 줄어드는 거 막아야 할 듯*/}\r\n                                {\r\n                                    user.uid === uid ?\r\n                                    loginUserInfo.profileIntro\r\n                                    : //** 소개글 데이터는 따로 받아와야할듯 **\r\n                                     '안녕하세요! 저의 프로필 페이지를 방문해주셔서 감사합니다.'\r\n                                }\r\n                            </p>\r\n                            {\r\n                                // 프로필 변경 버튼 --> 내 프로필에서만 표시\r\n                                user.uid === uid ?\r\n                                <button onClick={(e)=>{\r\n                                    e.preventDefault()\r\n                                    profileChange()\r\n                                }}>프로필 변경</button>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={`content-list transition-start ${fade}`}>\r\n                    <div className='content-wrap'>\r\n                        {\r\n                            docReady && documents != null && documents.length !== 0\r\n                            ? documents.map((a,i)=>{\r\n                                return (\r\n                                    // 클릭 시 상세로 이동!\r\n                                    <img key={i} src={a.downloadURL} alt='#' onClick={(e) => goDetail(a)}/>\r\n                                )\r\n                            })\r\n                            : // 유저 검색 --> 게시물 작성한 사람만 되기 때문에 예외처리 X\r\n                              <div className=\"no-post\">\r\n                                <p>작성된 게시물이 없어요!</p>\r\n                                <button className=\"upload-btn-profile\" onClick={uploadClicked}>\r\n                                    게시물 작성하기\r\n                                </button>\r\n                              </div>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"profile-go-main-btn-area\">\r\n                        <button className=\"go-main-btn\" onClick={goMain}>\r\n                            돌아가기\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile;","/* eslint-disable*/\r\n\r\n// 컬렉션에 접근하여 데이터를 불러오는 기능을 위한 훅\r\n// 메인화면 외에 사용\r\nimport { appFireStore } from \"../firebase/config\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { onSnapshot,collection,query,where,orderBy } from \"firebase/firestore\";\r\n\r\nexport const useCollectionDtl = (transaction, myQuery, order=\"\") => { // myQuery: 파이어스토어 쿼리 사용을 위한 파라미터\r\n\r\n    // documents 데이터 관리, error 관리\r\n    const [documents, setDocuments] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 💛 collection에 변화가 생길때마다 실행합니다. 때문에 항상 최신의 컬랙션 상태를 반환 받을 수 있습니다.\r\n    useEffect(() => {\r\n        let q;\r\n        if(order.length>0){\r\n            q = query(collection(appFireStore, transaction),where(...myQuery),orderBy(\"createdTime\",\"desc\"));\r\n        }\r\n        else{\r\n            q = query(collection(appFireStore, transaction),where(...myQuery));\r\n        }\r\n\r\n        console.log(q);\r\n        // onSnapshot: 가장 최근 컬랙션의 내용 반환 \r\n        // unsubscribe: 데이터 수신을 중단(데이터 오는거 기다릴 필요가 없을때 사용.)\r\n        const unsubscribe = onSnapshot(myQuery ? q : (collection(appFireStore, transaction)),\r\n            \r\n            // 응답받은 컬랙션을 snapshot에 저장\r\n            (snapshot) => {\r\n                let result = [];\r\n                // 배열형태로 저장되어있음 => forEach 사용\r\n                snapshot.docs.forEach((doc) => {\r\n                    // document 데이터랑 id 값 push 해주기\r\n                    result.push({ ...doc.data(), id: doc.id });\r\n                })\r\n                console.log(result);\r\n                setDocuments(result);\r\n                setError(null);\r\n            },\r\n            (error) => {\r\n                setError(error.message);\r\n            });\r\n            \r\n        //💛 외부에서 데이터를 구독하는 경우 clean-up 함수는 useEffect훅을 사용하는 컴포넌트가 마운트 해제될때 실행되어 구독을 종료하게 됩니다.\r\n        return unsubscribe; // clean-up 함수\r\n\r\n    }, [collection])// 매번 실행될 필요가 없고, 컬랙션 변화가 \r\n    return { documents, error }\r\n}"],"names":["props","user","useAuthContext","uid","useParams","useCollectionDtl","documents","error","useState","docReady","setDocReady","loginUserInfo","useSelector","state","fade","setFade","dispatch","useDispatch","navigate","useNavigate","useEffect","console","log","email","displayName","className","src","profileImage","length","alt","userEmail","profileIntro","onClick","e","preventDefault","window","blur","alert","map","a","i","downloadURL","id","goDetail","setVisible","scrollTo","top","behavior","transaction","myQuery","order","setDocuments","setError","q","query","collection","appFireStore","where","orderBy","unsubscribe","onSnapshot","snapshot","result","docs","forEach","doc","push","data","message"],"sourceRoot":""}