{"version":3,"file":"static/js/215.69b24aa1.chunk.js","mappings":"8MAuPA,UAhPA,SAAgBA,GACd,IAwCuBC,EAxCvB,GAAmCC,EAAAA,EAAAA,GAAa,YAAxCC,EAAY,EAAZA,aACR,GAD8B,EAARC,UACIC,EAAAA,EAAAA,GAAc,aAAjCC,EAAS,EAATA,UACP,GADsB,EAALC,OACaC,EAAAA,EAAAA,MAATC,GAAF,EAAXC,YAAiB,EAAJD,MACrB,GAAsBE,EAAAA,EAAAA,UAAS,IAAG,eAA7BC,EAAI,KAAEC,EAAO,KACbC,GAAOC,EAAAA,EAAAA,MAAPD,IACL,GAAsBH,EAAAA,EAAAA,UAAS,IAAG,eAA7BK,EAAI,KAAEC,EAAO,KAClB,GAAwBN,EAAAA,EAAAA,WAAS,GAAM,eAAlCO,EAAK,KAAEC,EAAQ,KAkEpB,OA1DAC,EAAAA,EAAAA,YAAU,WAER,IAAIC,EAAQC,YAAW,WAAOT,EAAQ,iBAAiB,GAAG,KAI1D,OAAO,WACLU,aAAaF,GACbR,EAAQ,IACRM,GAAS,EAEX,CACF,GAAE,KAEFC,EAAAA,EAAAA,YAAU,WAERH,EAAiB,OAATX,QAAS,IAATA,OAAS,EAATA,EAAWkB,QAAO,SAACC,EAAEC,GAAC,OAAID,EAAEE,KAAOb,CAAG,IAChD,GAAG,CAACR,KAEJc,EAAAA,EAAAA,YAAU,gBAEAQ,GAARZ,GAAqC,IAAhBA,EAAKa,OAAeV,GAAS,GAAQA,GAAS,EACrE,GAAG,CAACH,IAqCFE,GACA,+BACA,iBAAKY,UAAS,qCAAgClB,GAAO,WACnD,oBAASkB,UAAS,gCAA2BlB,GAAO,UAClD,iBAAKkB,UAAU,YAAW,WAGxB,iBAAKA,UAAU,iBAAgB,WAC7B,gBAAKA,UAAU,yBAAwB,UACrC,gBAAKC,IAAKf,EAAK,GAAGgB,aAAcC,IAAI,sCAEtC,iBAAMH,UAAU,eAAc,SAAEd,EAAK,GAAGkB,kBAK1C,gBAAKJ,UAAU,WAAU,UACvB,gBAAKA,UAAU,cAAa,UAC1B,gBAAKC,IAAKf,EAAK,GAAGmB,YAAaF,IAAI,wCAKvC,iBAAKH,UAAU,qBAAoB,WACjC,iBAAKA,UAAU,iBAAgB,WAC7B,mBAAQA,UAAU,WAAWM,QAAS,SAACC,GAErC,IAAIC,EAAQtB,EAAK,GAAGsB,MAEhBC,EAAUvB,EAAK,GAAGwB,cAAcC,SAAShC,EAAKK,KAE9C0B,GAAa,OAAOxB,EAAK,GAAGwB,eAC5BA,EAAcC,SAAShC,EAAKK,KAC9B0B,EAAgBA,EAAchB,QAAO,SAAAC,GAAC,OAAIA,GAAKhB,EAAKK,GAAG,IAEvD0B,EAAcE,KAAKjC,EAAKK,KAGtByB,EACFI,QAAQC,IAAI,mCAEZD,QAAQC,IAAI,sBAEdD,QAAQC,IAAI,8CAAYJ,GAKpBD,GACFD,IACAnC,EAAa,CAAEqC,cAAAA,EAAeF,MAAAA,GAAStB,EAAK,GAAGW,MAE/CW,IACAnC,EAAa,CAAEqC,cAAAA,EAAeF,MAAAA,GAAStB,EAAK,GAAGW,IAEnD,EAAE,UAxFS1B,EA0FMe,EAAK,GAAGwB,cAAcC,SAAShC,EAAKK,KAzF3Db,GAEA,gBAAK,aAAW,kCAAS4C,MAAM,UAAUC,KAAK,UACxCC,OAAO,KAAKC,KAAK,MAAMC,QAAQ,YAAYC,MAAM,KAAI,UACnD,iBAAMC,EAAE,qSAWhB,gBAAK,aAAW,qBAAMN,MAAM,UAAUC,KAAK,UACrCC,OAAO,KAAKC,KAAK,MAAMC,QAAQ,YAAYC,MAAM,KAAI,UACnD,iBAAMC,EAAE,8oBA2EV,mBAAQrB,UAAU,YAAYM,QAAS,SAACC,GACtCe,MAAM,oDACR,EAAE,UACA,gBAAK,aAAW,2BAAOP,MAAM,UAAUC,KAAK,UAC5CC,OAAO,KAAKC,KAAK,MAAMC,QAAQ,YAAYC,MAAM,KAAI,UACnD,iBAAMC,EAAE,oDAAoDL,KAAK,OACjEO,OAAO,eAAeC,eAAe,QAAQC,YAAY,WAK7D,mBAAQzB,UAAU,YAAYM,QAAS,SAACC,GACtCe,MAAM,8CACR,EAAE,UACA,iBAAK,aAAW,qBAAMP,MAAM,UAAUC,KAAK,UAC3CC,OAAO,KAAKC,KAAK,MAAMC,QAAQ,YAAYC,MAAM,KAAI,WACnD,iBAAMJ,KAAK,OAAOO,OAAO,eAAeC,eAAe,QACrDC,YAAY,IAAIC,GAAG,KAAKC,GAAG,QAAQC,GAAG,IAAIC,GAAG,YAE/C,oBAASb,KAAK,OAAOc,OAAO,4DAC5BP,OAAO,eAAeC,eAAe,QAAQC,YAAY,eAO/D,gBAAKzB,UAAU,eAAc,UAC3B,mBAAQA,UAAU,WAAWM,QAAS,SAACC,GACrCe,MAAM,eACR,EAAE,UACA,gBAAK,aAAW,eAAKP,MAAM,UAAUC,KAAK,UAC1CC,OAAO,KAAKC,KAAK,MAAMC,QAAQ,YAAYC,MAAM,KAAI,UACnD,oBAASJ,KAAK,OAAOc,OAAO,qCAC5BP,OAAO,eAAeQ,cAAc,QAAQP,eAAe,QAAQC,YAAY,gBAQvF,gBAAKzB,UAAU,iBAAgB,UAC7B,cAAGA,UAAU,kBAAiB,UAC5B,uBAAId,EAAK,GAAGsB,aAKhB,gBAAKR,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,YAAW,WACxB,gBAAKA,UAAU,mBAAkB,UAC/B,uBAAId,EAAK,GAAGkB,iBAEd,gBAAKJ,UAAU,qBAAoB,SAChCd,EAAK,GAAG8C,gBAOb9C,EAAK,GAAG+C,QAAU,GAElB,iCAEE,gBAAKjC,UAAU,uBAEf,gBAAKA,UAAU,kBAAiB,SAE5Bd,EAAK,GAAGgD,eAAeC,KAAI,SAACxC,EAAEC,GAC5B,OACE,+BACE,iBAAKI,UAAU,aAAY,WACzB,iBAAMA,UAAU,sBAAqB,UACnC,uBAAIL,EAAES,iBAER,iBAAMJ,UAAU,kBAAiB,SAC9BL,EAAEyC,cAL0BxC,IAUvC,SAKJ,WAKR,gBAAKI,UAAU,kBAAiB,UAC9B,mBAAQA,UAAU,cAAcM,QA1NvB,WACb+B,OAAOC,SAAS,CAAEC,IAAK,EAAGC,SAAU,WACpCH,OAAOI,QAAQC,MACjB,EAuNsD,SAAC,oCAQnD,IAEN,C,wICvNA,SAASC,IAAsD,IAAzCC,EAAO,UAAD,6CAAC,GAAGC,EAAS,UAAD,6CAAC,EAAEC,EAAO,UAAD,6CAAC,EAAEC,EAAQ,UAAD,6CAAC,EACpDC,EAAO,IAAIC,KACXC,EAAOF,EAAKG,cACZC,EAAQJ,EAAKK,WACbC,EAAMN,EAAKO,UACXC,EAAOR,EAAKS,WACZC,EAAMV,EAAKW,aACXC,EAAeZ,EAAKa,kBASxB,OAPc,IAAXhB,GAAcG,EAAKc,SAAUd,EAAKK,WAAWR,GACpC,IAATC,GAAYE,EAAKe,QAASf,EAAKO,UAAUT,GAClC,IAAPI,GAAUF,EAAKgB,YAAahB,EAAKG,cAAcJ,GAElDK,GAAS,KAAO,EAAIJ,EAAKK,aAAaY,OAAO,GAC7CX,GAAO,IAAMN,EAAKO,WAAWU,OAAO,IACpCf,EAAOF,EAAKG,eACAP,EAAOQ,EAAMR,EAAOU,EAAIE,EAAKE,EAAIE,CACjD,CAOA,SAASM,EAAcC,EAAWC,GAC9B,OAGJ,WAA0D,IAArCD,EAAW,UAAD,6CAAC,IAAIC,EAAW,UAAD,6CAAC,IAAIpB,EAAI,uCAE/CE,EAAOF,EAAKG,cACZC,EAAQJ,EAAKK,WAAa,EAC1BC,EAAMN,EAAKO,UACXC,EAAOR,EAAKS,WACZC,EAAMV,EAAKW,aAEa,KAAvB,GAAKP,GAAOrD,SACbqD,EAAQ,IAAMA,GAEQ,KAArB,GAAKE,GAAKvD,SACXuD,EAAM,IAAMA,GAEW,KAAtB,GAAKE,GAAMzD,SACZyD,EAAO,IAAMA,GAES,KAArB,GAAKE,GAAK3D,SACX2D,EAAM,IAAMA,GAGhB,MAAQ,GAAKR,EAAMiB,EAAaf,EAAOe,EAAab,EAAK,IAAME,EAAMY,EAAaV,CACtF,CAzBWW,CAAWF,EAAWC,EAAW,IAAInB,KAChD,CCtCA,IAAMqB,EAAY,CACdC,SAAU,KACVC,WAAW,EACX/F,MAAO,KACPgG,SAAS,GAIPC,EAAe,SAACC,EAAOC,GAEzB,OAAQA,EAAOC,MACX,IAAK,YACD,MAAO,CAAEL,WAAW,EAAMD,SAAU,KAAiBE,SAAS,EAAOhG,MAAO,MAChF,IAAK,SAEL,IAAK,UAEL,IAAK,YACD,MAAO,CAAE+F,WAAW,EAAOD,SAAUK,EAAOE,QAASL,SAAS,EAAOhG,MAAO,MAChF,IAAK,QACD,MAAO,CAAE+F,WAAW,EAAOD,SAAU,KAAgBE,SAAS,EAAOhG,MAAOmG,EAAOE,SACvF,QACI,OAAOH,EAEnB,EAGavG,EAAe,SAAC2G,GAIzB,OAA6BC,EAAAA,EAAAA,YAAWN,EAAcJ,GAAU,eAAzDhG,EAAQ,KAAE2G,EAAQ,KACzB,GAA4BpG,EAAAA,EAAAA,UAAS,IAAG,eAGlCqG,GAHO,KAAW,MAGTC,EAAAA,EAAAA,IAAWC,EAAAA,GAAcL,IAIlCM,EAAW,yCAAG,WAAOC,EAAIC,GAAG,oFAGxBC,EAAcC,EAAAA,GAAAA,SAAmB,IAAIxC,MACrCyC,EAAcxB,EAAc,IAAI,KAGhCyB,EAAahD,IAGbiD,GAAaC,EAAAA,EAAAA,IAAIC,EAAAA,GAAS,UAAUP,EAAIQ,MACxCC,GAAaC,EAAAA,EAAAA,IAAqBL,EAAYL,GAGpDN,EAAS,CAAEJ,KAAM,cACjB,IAMImB,EAAWE,GAAG,iBACd,SAACC,GAED,IACA,SAAC1H,GACGoC,QAAQpC,MAAM,iCAASA,EAC3B,IACA,YACE2H,EAAAA,EAAAA,IAAeJ,EAAWG,SAASN,KAAKQ,MAAK,SAAChG,GAE5CQ,QAAQC,IAAI,8CAAYT,GAMxB,IAAMiG,GAASC,EAAAA,EAAAA,IAAOrB,GAAO,kBAAKI,GAAG,IAAEE,YAAAA,EAAaE,YAAAA,EAAYC,WAAAA,EAAYtF,YAAAA,KAC5EQ,QAAQC,IAAIwF,GAEZrB,EAAS,CAAEJ,KAAM,SAAUC,QAASwB,IACpCzF,QAAQC,IAAI,2BACd,GACF,GAKJ,CAFE,MAAOrC,GACLwG,EAAS,CAAEJ,KAAM,QAASC,QAASrG,EAAM+H,SAC7C,CAAC,2CAEJ,gBAlDgB,wCAsDXC,EAAU,yCAAG,WAAOnB,GAAG,kFAGnBE,EAAcC,EAAAA,GAAAA,SAAmB,IAAIxC,MACrCyC,EAAcxB,EAAc,IAAI,KAGhCyB,EAAahD,IAGnBsC,EAAS,CAAEJ,KAAM,cACjB,IAOcyB,GAASC,EAAAA,EAAAA,IAAOrB,GAAO,kBAAKI,GAAG,IAAEE,YAAAA,EAAaE,YAAAA,EAAYC,WAAAA,KAChE9E,QAAQC,IAAIwF,GAEZrB,EAAS,CAAEJ,KAAM,SAAUC,QAASwB,IACpCzF,QAAQC,IAAI,2BAKpB,CAFE,MAAOrC,GACLwG,EAAS,CAAEJ,KAAM,QAASC,QAASrG,EAAM+H,SAC7C,CAAC,2CAEJ,gBA7Be,sCAiCVnI,EAAY,yCAAG,WAAOG,EAAUqB,GAAE,4EAGpC,OAFAoF,EAAS,CAAEJ,KAAM,cAEjB,mBAUyB6B,EAAAA,EAAAA,KAAUpB,EAAAA,EAAAA,IAAIJ,EAAOrF,IAAI,UAAKrB,IAAY,KAAD,EAAxD8H,EAAM,OACZrB,EAAS,CAAEJ,KAAM,UAAWC,QAASwB,IAAU,gDAG/CrB,EAAS,CAAEJ,KAAM,QAASC,QAAS,KAAM0B,UAAW,yDAE3D,gBAnBiB,wCAuBZG,EAAc,yCAAG,WAAO9G,GAAE,4EAEI,OAAhCoF,EAAS,CAAEJ,KAAM,cAAe,mBAEP+B,EAAAA,EAAAA,KAAUtB,EAAAA,EAAAA,IAAIJ,EAAOrF,IAAK,KAAD,EAAxCyG,EAAM,OACZrB,EAAS,CAAEJ,KAAM,YAAaC,QAASwB,IAAU,gDAEjDrB,EAAS,CAAEJ,KAAM,QAASC,QAAS,KAAM0B,UAAW,yDAE3D,gBATmB,sCAadK,EAAO,yCAAG,WAAOvB,GAAG,kFAGhBE,EAAcC,EAAAA,GAAAA,SAAmB,IAAIxC,MACrCyC,EAAcxB,EAAc,IAAI,KAGhCyB,EAAahD,IAGnBsC,EAAS,CAAEJ,KAAM,cACjB,IAOUyB,GAASC,EAAAA,EAAAA,IAAOrB,GAAO,kBAAKI,GAAG,IAAEE,YAAAA,EAAaE,YAAAA,EAAYC,WAAAA,KAChE9E,QAAQC,IAAIwF,GAEZrB,EAAS,CAAEJ,KAAM,SAAUC,QAASwB,IACpCzF,QAAQC,IAAI,2BAIhB,CAFE,MAAOrC,GACLwG,EAAS,CAAEJ,KAAM,QAASC,QAASrG,EAAM+H,SAC7C,CAAC,2CAEJ,gBA5BY,sCA8Bb,MAAO,CAAEnB,YAAAA,EAAaoB,WAAAA,EAAYpI,aAAAA,EAAcsI,eAAAA,EAAgBE,QAAAA,EAASvI,SAAAA,EAE7E,C","sources":["components/Detail.js","utils/DateUtil.js","hooks/useFirestore.js"],"sourcesContent":["/*eslint-disable */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useFirestore } from \"../hooks/useFirestore\";\r\nimport { useAuthContext } from \"../hooks/useAuthContext\";\r\nimport { useCollection } from '../hooks/useCollection';\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nfunction Detail(props) {\r\n  const { editDocument, response } = useFirestore(\"FeedData\");// 컬렉션 이름 파라미터로 넣어주기\r\n  const {documents,error} = useCollection(\"FeedData\"); // 서버 리얼 데이터\r\n  const { isAuthReady, user } = useAuthContext();\r\n  let [fade, setFade] = useState('') // Animation Style State\r\n  let {uid} = useParams() // 게시물 id 키값 (URL 파라미터)\r\n  let [post, setPost] = useState([]) // 데이터 바인딩할 상세 정보 State\r\n  let [ready, setReady] = useState(false)\r\n\r\n  // 뒤로가기 + 상단으로 스크롤 이동\r\n  const goBack = () => {\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    window.history.back() // 뒤로가기\r\n  }\r\n\r\n  useEffect(()=>{\r\n    // Automatic batching 때문에 타이머 준다\r\n    let timer = setTimeout(() => {setFade('transition-end')}, 100)\r\n    // document.body.style.overflow = 'hidden' // 스크롤 제거 ( 하려했는데 사진 크기 때문에 필요할 수도.. 일단 보류 )\r\n\r\n    // cleanUp Func\r\n    return () => {\r\n      clearTimeout(timer)\r\n      setFade('')\r\n      setReady(false)\r\n      // document.body.style.overflow = ''\r\n    }\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    // documents 받아오면 a.id가 같은 것을 post 에 담아주기\r\n    setPost(documents?.filter((a,i)=> a.id === uid))\r\n  }, [documents])\r\n\r\n  useEffect(()=>{\r\n    // 데이터 받아오는 과정에서 undefined 되는 경우가 있어서 예외처리 해줬다..\r\n    post != undefined && post.length !== 0 ? setReady(true) : setReady(false)\r\n  }, [post])\r\n\r\n\r\n  // 좋아요 눌린 상태에 따른 버튼 이미지 반환\r\n  const getLikeStatus = (likeYN) => {\r\n    if (likeYN) {\r\n      return (\r\n        <svg aria-label=\"좋아요 취소\" color=\"#ed4956\" fill=\"#ed4956\"\r\n              height=\"24\" role=\"img\" viewBox=\"0 0 48 48\" width=\"24\">\r\n                <path d=\"M34.6 3.1c-4.5 0-7.9 1.8-10.6 5.6-2.7-3.7-6.1-5.5-10.6-5.5C6 \r\n                 3.1 0 9.6 0 17.6c0 7.3 5.4 12 10.6 16.5.6.5 1.3 1.1 1.9 1.7l2.3 \r\n                 2c4.4 3.9 6.6 5.9 7.6 6.5.5.3 1.1.5 1.6.5s1.1-.2 1.6-.5c1-.6 \r\n                 2.8-2.2 7.8-6.8l2-1.8c.7-.6 1.3-1.2 2-1.7C42.7 29.6 48 \r\n                 25 48 17.6c0-8-6-14.5-13.4-14.5z\">\r\n                </path>\r\n        </svg>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <svg aria-label=\"좋아요\" color=\"#262626\" fill=\"#262626\"\r\n              height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                <path d=\"M16.792 3.904A4.989 4.989 0 0121.5 9.122c0 3.072-2.652 4.959-5.197\r\n                  7.222-2.512 2.243-3.865 3.469-4.303 3.752-.477-.309-2.143-1.823-4.303-3.752C5.141\r\n                  14.072 2.5 12.167 2.5 9.122a4.989 4.989 0 014.708-5.218 4.21 4.21 0 013.675\r\n                    1.941c.84 1.175.98 1.763 1.12 1.763s.278-.588 1.11-1.766a4.17 4.17 0 013.679-1.938m0-2a6.04\r\n                    6.04 0 00-4.797 2.127 6.052 6.052 0 00-4.787-2.127A6.985 6.985 0 00.5 9.122c0 3.61\r\n                      2.55 5.827 5.015 7.97.283.246.569.494.853.747l1.027.918a44.998 44.998 0 003.518 3.018\r\n                      2 2 0 002.174 0 45.263 45.263 0 003.626-3.115l.922-.824c.293-.26.59-.519.885-.774\r\n                        2.334-2.025 4.98-4.32 4.98-7.94a6.985 6.985 0 00-6.708-7.218z\">\r\n                </path>\r\n        </svg>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    ready ?\r\n    <>\r\n    <div className={`all-feeds transition-start ${fade}`}>\r\n      <article className={`Post transition-start ${fade}`}>\r\n        <div className=\"Post-area\">\r\n\r\n          {/* 프로필 영역 */}\r\n          <div className=\"Post-user-area\">\r\n            <div className=\"Post-user-profileImage\">\r\n              <img src={post[0].profileImage} alt=\"프로필사진\"/>\r\n            </div>\r\n            <span className=\"Post-user-id\">{post[0].displayName}</span>\r\n          </div>\r\n\r\n          {/* 이미지 영역 */}\r\n          {/* 클릭 시 상세 페이지로 이동 */}\r\n          <div className=\"Post-img\">\r\n            <div className=\"Post-img-bg\">\r\n              <img src={post[0].downloadURL} alt=\"게시물사진\"/>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 버튼 영역 */}\r\n          <div className=\"Post-icon-btn-area\">\r\n            <div className=\"three-btn-area\">\r\n              <button className=\"like-btn\" onClick={(e) => {\r\n                // 좋아요 갯수\r\n                let likes = post[0].likes\r\n                // 좋아요 여부\r\n                let isLiked = post[0].peopleWhoLike.includes(user.uid)\r\n                // 좋아요 누른 사람들\r\n                let peopleWhoLike = [...post[0].peopleWhoLike]\r\n                if (peopleWhoLike.includes(user.uid)) {\r\n                  peopleWhoLike = peopleWhoLike.filter(a => a != user.uid)\r\n                } else {\r\n                  peopleWhoLike.push(user.uid)\r\n                }\r\n                \r\n                if (isLiked) {\r\n                  console.log('좋아요 취소')\r\n                } else {\r\n                  console.log('좋아요')\r\n                }\r\n                console.log('좋아하는 사람들', peopleWhoLike)\r\n\r\n                //=========================================================\r\n                // 수정 firebase 태우기, 변경하는 필드를 객체 형식으로 넣어준다\r\n                //=========================================================\r\n                if (isLiked) {\r\n                  likes--;\r\n                  editDocument({ peopleWhoLike, likes }, post[0].id)\r\n                } else {\r\n                  likes++;\r\n                  editDocument({ peopleWhoLike, likes }, post[0].id)\r\n                }\r\n              }}>\r\n                {/* 받아온 props를 확인해서 좋아요 버튼 반환*/}\r\n                {getLikeStatus(post[0].peopleWhoLike.includes(user.uid))}\r\n              </button>\r\n              \r\n              <button className=\"reply-btn\" onClick={(e) => {\r\n                alert('댓글쓰기 구현중.. ^.^')\r\n              }}>\r\n                <svg aria-label=\"댓글쓰기\" color=\"#262626\" fill=\"#262626\"\r\n                height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                  <path d=\"M20.656 17.008a9.993 9.993 0 10-3.59 3.615L22 22z\" fill=\"none\"\r\n                  stroke=\"currentColor\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n                  </path>\r\n                </svg>\r\n              </button>\r\n\r\n              <button className=\"share-btn\" onClick={(e) => {\r\n                alert('보내기 구현중.. ^.^')\r\n              }}>\r\n                <svg aria-label=\"보내기\" color=\"#262626\" fill=\"#262626\"\r\n                height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                  <line fill=\"none\" stroke=\"currentColor\" strokeLinejoin=\"round\"\r\n                    strokeWidth=\"2\" x1=\"22\" x2=\"9.218\" y1=\"3\" y2=\"10.083\">\r\n                  </line>\r\n                  <polygon fill=\"none\" points=\"11.698 20.334 22 3.001 2 3.001 9.218 10.084 11.698 20.334\"\r\n                  stroke=\"currentColor\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n                  </polygon>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n\r\n            {/* 떨어뜨린 곳에 저장 버튼 */}\r\n            <div className=\"one-btn-area\">\r\n              <button className=\"save-btn\" onClick={(e) => {\r\n                alert('저장')\r\n              }}>\r\n                <svg aria-label=\"저장\" color=\"#262626\" fill=\"#262626\"\r\n                height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                  <polygon fill=\"none\" points=\"20 21 12 13.44 4 21 4 3 20 3 20 21\"\r\n                  stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n                  </polygon>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 좋아요 Count */}\r\n          <div className=\"Post-like-area\">\r\n            <p className=\"Post-like-count\">\r\n              <b>{post[0].likes}</b>\r\n            </p>\r\n          </div>\r\n\r\n          {/* 게시글 영역 */}\r\n          <div className=\"Post-text-area\">\r\n            <div className=\"Post-text\">\r\n              <div className=\"Post-writer-name\">\r\n                <b>{post[0].displayName}</b>\r\n              </div>\r\n              <div className=\"Post-text-postText\">\r\n                {post[0].postText}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 댓글 영역 */}\r\n          {\r\n            post[0].replies > 0 ?\r\n\r\n            <>\r\n              {/* 구분선 */}\r\n              <div className=\"Post-reply-border\"></div>\r\n              {/* 댓글 표시 */}\r\n              <div className=\"Post-reply-area\">\r\n                {\r\n                  post[0].peopleWhoReply.map((a,i)=>{\r\n                    return (\r\n                      <>\r\n                        <div className=\"Post-reply\" key={i}>\r\n                          <span className=\"Post-reply-nickname\">\r\n                            <b>{a.displayName}</b>\r\n                          </span>\r\n                          <span className=\"Post-reply-text\">\r\n                            {a.replyText}\r\n                          </span>\r\n                        </div>\r\n                      </>\r\n                    )\r\n                  })\r\n                }\r\n              </div>\r\n            </>\r\n\r\n            : null\r\n          }\r\n        </div>\r\n      </article>\r\n\r\n      <div className=\"detail-btn-area\">\r\n        <button className=\"go-main-btn\" onClick={goBack}>\r\n          돌아가기\r\n        </button>\r\n      </div>\r\n\r\n    </div>\r\n    </>\r\n\r\n    : null\r\n  );\r\n}\r\n\r\nexport default Detail;","/*eslint-disable */\r\n\r\n/**\r\n * 날짜 출력하는 함수\r\n * format: 포매팅 기호 (/,-,. 같은거)\r\n * addMonth: 월 더하기\r\n * addDay: 일 더하기\r\n * addYear: 년 더하기\r\n*/\r\nfunction today(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day;\r\n}\r\n\r\n/**\r\n * unique 숫자 구하기...\r\n*/\r\nfunction GetUniqueNum(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n    let milliseconds = date.getMilliseconds(); // 밀리초\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day+hour+min+milliseconds;\r\n}\r\n\r\n/**\r\n * 오늘 날짜 + 시간 출력하는 함수\r\n * dateFormat: 날짜 포매팅 기호 (/,-,. 같은거)\r\n * timeFormat: 시간 포매팅 기호 (/,-,. 같은거)\r\n*/\r\nfunction GetCurDayTime(dateFormat,timeFormat) {\r\n    return TimeString(dateFormat,timeFormat,new Date());\r\n}\r\n\r\nfunction TimeString (dateFormat='/',timeFormat=':',date) {\r\n        \r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1; // 1월=0,12월=11이므로 1 더함\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if ((\"\" + month).length === 1) {\r\n        month = \"0\" + month;\r\n    }\r\n    if ((\"\" + day).length === 1) {\r\n        day = \"0\" + day;\r\n    }\r\n    if ((\"\" + hour).length === 1) {\r\n        hour = \"0\" + hour;\r\n    }\r\n    if ((\"\" + min).length === 1) {\r\n        min = \"0\" + min;\r\n    }\r\n\r\n    return (\"\" + year+ dateFormat + month+ dateFormat + day+ \" \" + hour+ timeFormat + min)\r\n}\r\n\r\nexport {today, GetCurDayTime, TimeString, GetUniqueNum } ","/* eslint-disable*/\r\n// 컬렉션을 만들고 데이터를 넘겨주는 작업을 위한 훅\r\nimport { useReducer, useState } from \"react\"\r\nimport { appFireStore, timestamp, storage } from \"../firebase/config\"\r\nimport { addDoc, updateDoc, deleteDoc, doc, collection } from \"firebase/firestore\"\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { GetCurDayTime, GetUniqueNum }  from \"../utils/DateUtil.js\"\r\n\r\n\r\n// 우리가 받을 응답을 저장할 객체 (객체이기 때문에 리듀서로 관리)\r\n// 상태를 관리할 때 error나 isPending을 useReducer로 한번에 관리\r\n\r\n/**\r\n * document : 파이어스토어에 document의 생성을 요청하면 우리가 생성한 document를 반환\r\n *            파이어스토어의 데이터 저장 단위\r\n * isPending: 통신중인지 아닌지 상태\r\n * success : 요청에 대한 응답의 성공 유무\r\n */\r\nconst initState = {\r\n    document: null,\r\n    isPending: false,\r\n    error: null,\r\n    success: false\r\n}\r\n\r\n// 전달 받는 action에 따른 state 업데이트\r\nconst storeReducer = (state, action) => {\r\n    /**case 마다 데이터가 다 달라서 spread operator 안쓰고 그냥 적음... */\r\n    switch (action.type) {\r\n        case 'isPending':\r\n            return { isPending: true, document: null,            success: false, error: null }\r\n        case 'addDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'editDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'deleteDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'error':\r\n            return { isPending: false, document: null,           success: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// transaction: 우리가 데이터를 저장할 컬렉션(폴더)\r\nexport const useFirestore = (transaction) => {\r\n\r\n    // response에 요청에 대한 firestore 의 응답 저장\r\n    // 저장되는 데이터 === 저장 성공 또는 요청한 문서 데이터(객체)\r\n    const [response, dispatch] = useReducer(storeReducer, initState);\r\n    const [imgUrl, setImgUrl] = useState([]);\r\n    // colRef : 만들 컬렉션의 참조 (컬렉션 이름)\r\n\t// 원하는 컬렉션의 참조를 인자로 보내주면 파이어스토어가 자동으로 해당 컬렉션을 생성해줌 \r\n    const colRef = collection(appFireStore, transaction);\r\n\r\n    \r\n    // 컬렉션에 문서를 저장(이미지 저장 시)\r\n    const addDocument = async (doc,pic) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n        // 이미지 업로드 경로 저장\r\n        const storageRef = ref(storage, 'images/'+pic.name );\r\n        const uploadTask = uploadBytesResumable(storageRef, pic);\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n            /*===============================================\r\n             * 이미지 저장\r\n             *===================================================*/\r\n\r\n            uploadTask.on('state_changed', \r\n            (snapshot) => {\r\n                null\r\n            }, \r\n            (error) => {\r\n                console.error('실패사유는', error);\r\n            }, \r\n            () => {\r\n              getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                \r\n                console.log('업로드된 경로는', downloadURL);\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬렉션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe, downloadURL});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');             \r\n              });\r\n            }\r\n          );\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에 문서를 저장(댓글 저장)\r\n    const addComment = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬렉션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에서 문서를 수정\r\n    const editDocument = async (documents,id) => {\r\n        dispatch({ type: \"isPending\" });\r\n        \r\n        // const 임시 = doc(appFireStore,'diary',id);\r\n\r\n        try {\r\n            // // 수정 날짜가 필요할 경우 사용하면 됨\r\n            // const createdTime = timestamp.fromDate(new Date());\r\n            // const createdDate = GetCurDayTime('/',':');\r\n\r\n            // docRef : 참조(컬렉션 이름)\r\n            // updateDoc : 컬렉션에 있는 문서 수정\r\n            // const docRef = await updateDoc(doc(colRef,id),{ ...documents, createdTime,createdDate});\r\n            const docRef = await updateDoc(doc(colRef,id),{ ...documents});\r\n            dispatch({ type: 'editDoc', payload: docRef });\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n        \r\n    // 컬렉션에서 문서를 삭제\r\n    const deleteDocument = async (id) => {\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n            const docRef = await deleteDoc(doc(colRef,id));\r\n            dispatch({ type: 'deleteDoc', payload: docRef });\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n    \r\n    // 유저 최초 저장 ( 회원가입 )\r\n    const addUser = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n            /*===============================================\r\n            * 데이터 저장\r\n            *===================================================*/\r\n            // docRef : 참조(컬렉션 이름)\r\n            // addDoc : 컬렉션에 문서를 추가\r\n            const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n            console.log(docRef);\r\n\r\n            dispatch({ type: 'addDoc', payload: docRef });\r\n            console.log('저장완료');\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n    return { addDocument, addComment, editDocument, deleteDocument, addUser, response }\r\n\r\n}"],"names":["props","likeYN","useFirestore","editDocument","response","useCollection","documents","error","useAuthContext","user","isAuthReady","useState","fade","setFade","uid","useParams","post","setPost","ready","setReady","useEffect","timer","setTimeout","clearTimeout","filter","a","i","id","undefined","length","className","src","profileImage","alt","displayName","downloadURL","onClick","e","likes","isLiked","peopleWhoLike","includes","push","console","log","color","fill","height","role","viewBox","width","d","alert","stroke","strokeLinejoin","strokeWidth","x1","x2","y1","y2","points","strokeLinecap","postText","replies","peopleWhoReply","map","replyText","window","scrollTo","top","behavior","history","back","GetUniqueNum","format","addMonth","addDay","addYear","date","Date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","min","getMinutes","milliseconds","getMilliseconds","setMonth","setDate","setFullYear","slice","GetCurDayTime","dateFormat","timeFormat","TimeString","initState","document","isPending","success","storeReducer","state","action","type","payload","transaction","useReducer","dispatch","colRef","collection","appFireStore","addDocument","doc","pic","createdTime","timestamp","createdDate","createdUqe","storageRef","ref","storage","name","uploadTask","uploadBytesResumable","on","snapshot","getDownloadURL","then","docRef","addDoc","message","addComment","updateDoc","deleteDocument","deleteDoc","addUser"],"sourceRoot":""}