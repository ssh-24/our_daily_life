{"version":3,"file":"static/js/194.6f1a1d4e.chunk.js","mappings":"iLAmFA,UA7EA,SAAiBA,GACb,IAAOC,GAAQC,EAAAA,EAAAA,KAARD,KACP,GAA0BE,EAAAA,EAAAA,GAAiB,WAAW,CAAC,MAAM,KAAKF,EAAKG,MAAhEC,EAAS,EAATA,UACP,GADsB,EAALC,OACeC,EAAAA,EAAAA,WAAS,IAAM,eAAxCC,EAAQ,KAAEC,EAAW,KAgB5B,OAdAC,EAAAA,EAAAA,YAAU,WAEND,GAAY,GACZE,QAAQC,IAAI,SAASX,GACrBU,QAAQC,IAAI,uBAAQX,EAAKY,OACzBF,QAAQC,IAAI,uBAAQX,EAAKa,YAC7B,GAAE,KAEFJ,EAAAA,EAAAA,YAAU,WAEND,GAAY,GACZE,QAAQC,IAAI,8BAAUP,EAC1B,GAAE,CAACA,KAGC,+BACI,gCACI,gBAAKU,UAAU,YAAW,UACtB,iBAAKA,UAAU,iBAAgB,UAEvBP,GAAyB,MAAbH,GACV,gBAAKU,UAAU,cAAcC,IAAKX,EAAU,GAAGY,aAAcC,IAAI,qCACjE,gBAAKH,UAAU,cAAcC,IAAI,8BAA8BE,IAAI,qCAEzE,iBAAKH,UAAU,eAAc,WACzB,wBAAKd,EAAKY,SACV,0BAAI,IAAEZ,EAAKa,gBACX,uBAAG,kKAIH,uBAAG,6BACH,uBAAG,oCAKf,gBAAKC,UAAU,eAAc,UACzB,gBAAKA,UAAU,eAAc,SAErBP,GAAyB,MAAbH,EACVA,EAAUc,KAAI,SAACC,EAAEC,GACf,OACI,gBAAaL,IAAKI,EAAEE,YAAaJ,IAAI,IAAIK,QAAS,WAC9CZ,QAAQC,IAAIQ,EAAEI,SAClB,GAFUH,EAIlB,IACE,aAsB9B,C,qHCzEalB,EAAmB,SAACsB,EAAaC,GAAuB,IAAdC,EAAM,UAAD,6CAAC,GAGzD,GAAkCpB,EAAAA,EAAAA,UAAS,MAAK,eAAzCF,EAAS,KAAEuB,EAAY,KAC9B,GAA0BrB,EAAAA,EAAAA,UAAS,MAAK,eAAjCD,EAAK,KAAEuB,EAAQ,KAqCtB,OAlCAnB,EAAAA,EAAAA,YAAU,WACN,IAAIoB,EAEAA,EADDH,EAAMI,OAAO,GACRC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,IAAWC,EAAAA,GAAcT,GAAaU,EAAAA,GAAAA,WAAM,GAAD,OAAIT,KAASU,EAAAA,EAAAA,IAAQ,cAAc,UAGpFJ,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,IAAWC,EAAAA,GAAcT,GAAaU,EAAAA,GAAAA,WAAM,GAAD,OAAIT,KAG7Df,QAAQC,IAAIkB,GAGZ,IAAMO,GAAcC,EAAAA,EAAAA,IAAWZ,EAAUI,GAAKG,EAAAA,EAAAA,IAAWC,EAAAA,GAAcT,IAGnE,SAACc,GACG,IAAIC,EAAS,GAEbD,EAASE,KAAKC,SAAQ,SAACC,GAEnBH,EAAOI,MAAK,kBAAKD,EAAIE,QAAM,IAAEC,GAAIH,EAAIG,KACzC,IACAnC,QAAQC,IAAI4B,GACZZ,EAAaY,GACbX,EAAS,KACb,IACA,SAACvB,GACGuB,EAASvB,EAAMyC,QACnB,IAGJ,OAAOV,CAEX,GAAG,CAACJ,EAAAA,KACG,CAAE5B,UAAAA,EAAWC,MAAAA,EACxB,C","sources":["components/Profile.js","hooks/useCollectionDtl.js"],"sourcesContent":["/*eslint-disable */\r\nimport { useState, useEffect } from 'react';\r\nimport { useAuthContext } from '../hooks/useAuthContext';\r\nimport { useCollectionDtl } from '../hooks/useCollectionDtl';\r\n// import basicImg from '/assets/profile_default.png';\r\n\r\nfunction Profile(props) {\r\n    const {user} = useAuthContext()\r\n    const {documents,error} = useCollectionDtl(\"FeedData\",[\"UID\",\"==\",user.uid])\r\n    const [docReady, setDocReady] = useState(false)\r\n    \r\n    useEffect(()=>{\r\n        // documents 여부 state 변경\r\n        setDocReady(false)\r\n        console.log(\"user :\",user)\r\n        console.log(\"이메일 :\",user.email)\r\n        console.log(\"닉네임 :\",user.displayName)\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        // documents 여부 state 변경\r\n        setDocReady(true)\r\n        console.log(\"내가 쓴글 :\",documents)\r\n    },[documents])\r\n\r\n    return (\r\n        <>\r\n            <section>\r\n                <div className=\"container\">\r\n                    <div className='container-wrap'>\r\n                        {\r\n                            docReady && documents != null\r\n                            ? <img className=\"profile-img\" src={documents[0].profileImage} alt=\"프로필 사진\"/>\r\n                            : <img className=\"profile-img\" src='/assets/profile_default.png' alt=\"프로필 사진\"/>\r\n                        }\r\n                        <div className=\"profile-info\">\r\n                            <h3>{user.email}</h3>\r\n                            <h4>@{user.displayName}</h4>\r\n                            <p>\r\n                                안녕하세요! 저의 프로필 페이지를 방문해주셔서 감사합니다\r\n                                {/* 소개글 내용이 짧을 때 줄어드는 거 막아야 할 듯*/}\r\n                            </p>\r\n                            <p>팔로워: 100</p>\r\n                            <p>팔로우: 50</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='content-list'>\r\n                    <div className='content-wrap'>\r\n                        {\r\n                            docReady && documents != null\r\n                            ? documents.map((a,i)=>{\r\n                                return (\r\n                                    <img key={i} src={a.downloadURL} alt='#' onClick={()=>{\r\n                                        console.log(a.postText);\r\n                                    }}/>\r\n                                )\r\n                            })\r\n                            : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {/* <div className='content-list'>\r\n                    <div className='content-wrap'>\r\n                        <img src='/assets/post_camera.jpg' alt='#'/>\r\n                        <img src='/assets/post_cat.jpg' alt='#'/>\r\n                        <img src='/assets/post_dog.jpg' alt='#'/>\r\n                    </div>\r\n                    <div className='content-wrap'>\r\n                        <img src='/assets/post_camera.jpg' alt='#'/>\r\n                        <img src='/assets/post_cat.jpg' alt='#'/>\r\n                        <img src='/assets/post_dog.jpg' alt='#'/>\r\n                    </div>\r\n                </div> */}\r\n\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile;","/* eslint-disable*/\r\n\r\n// 컬렉션에 접근하여 데이터를 불러오는 기능을 위한 훅\r\n// 메인화면 외에 사용\r\nimport { appFireStore } from \"../firebase/config\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { onSnapshot,collection,query,where,orderBy } from \"firebase/firestore\";\r\n\r\nexport const useCollectionDtl = (transaction, myQuery, order=\"\") => { // myQuery: 파이어스토어 쿼리 사용을 위한 파라미터\r\n\r\n    // documents 데이터 관리, error 관리\r\n    const [documents, setDocuments] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 💛 collection에 변화가 생길때마다 실행합니다. 때문에 항상 최신의 컬랙션 상태를 반환 받을 수 있습니다.\r\n    useEffect(() => {\r\n        let q;\r\n        if(order.length>0){\r\n            q = query(collection(appFireStore, transaction),where(...myQuery),orderBy(\"createdTime\",\"desc\"));\r\n        }\r\n        else{\r\n            q = query(collection(appFireStore, transaction),where(...myQuery));\r\n        }\r\n\r\n        console.log(q);\r\n        // onSnapshot: 가장 최근 컬랙션의 내용 반환 \r\n        // unsubscribe: 데이터 수신을 중단(데이터 오는거 기다릴 필요가 없을때 사용.)\r\n        const unsubscribe = onSnapshot(myQuery ? q : (collection(appFireStore, transaction)),\r\n            \r\n            // 응답받은 컬랙션을 snapshot에 저장\r\n            (snapshot) => {\r\n                let result = [];\r\n                // 배열형태로 저장되어있음 => forEach 사용\r\n                snapshot.docs.forEach((doc) => {\r\n                    // document 데이터랑 id 값 push 해주기\r\n                    result.push({ ...doc.data(), id: doc.id });\r\n                })\r\n                console.log(result);\r\n                setDocuments(result);\r\n                setError(null);\r\n            },\r\n            (error) => {\r\n                setError(error.message);\r\n            });\r\n            \r\n        //💛 외부에서 데이터를 구독하는 경우 clean-up 함수는 useEffect훅을 사용하는 컴포넌트가 마운트 해제될때 실행되어 구독을 종료하게 됩니다.\r\n        return unsubscribe; // clean-up 함수\r\n\r\n    }, [collection])// 매번 실행될 필요가 없고, 컬랙션 변화가 \r\n    return { documents, error }\r\n}"],"names":["props","user","useAuthContext","useCollectionDtl","uid","documents","error","useState","docReady","setDocReady","useEffect","console","log","email","displayName","className","src","profileImage","alt","map","a","i","downloadURL","onClick","postText","transaction","myQuery","order","setDocuments","setError","q","length","query","collection","appFireStore","where","orderBy","unsubscribe","onSnapshot","snapshot","result","docs","forEach","doc","push","data","id","message"],"sourceRoot":""}