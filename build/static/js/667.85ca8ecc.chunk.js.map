{"version":3,"file":"static/js/667.85ca8ecc.chunk.js","mappings":"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","sources":["components/ReplyInput.js","components/LikeDetail.js","components/Detail.js","utils/DateUtil.js","hooks/useFirestore.js"],"sourcesContent":["/*eslint-disable */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useFirestore } from \"../hooks/useFirestore\";\r\nimport { setRmVisible } from \"../store/replySlice\";\r\n\r\n\r\nfunction ReplyInput(props) {\r\n    const { editDocument, response } = useFirestore(\"FeedData\");// 컬렉션 이름 파라미터로 넣어주기\r\n    let dispatch = useDispatch()\r\n    const loginUserInfo = useSelector((state) => state.loginUserInfo) // 로그인 유저 정보, (Input.js 에서 초기 셋팅)\r\n    let [fade, setFade] = useState('') // Animation Style State\r\n    let [newReply, setNewReply] = useState({\r\n        displayName: loginUserInfo.displayName,\r\n        UID: loginUserInfo.UID,\r\n        replyText: '',\r\n    }); // 로그인한 loginUserInfo 에서 받아온 displayName, UID 로 박아놓는다 ( displayName의 경우, user 에서는 초기값으로 들어가 있어서 다름 )\r\n\r\n    const { displayName, replyText } = newReply; // 구조분해 할당 --> 값 추출\r\n\r\n    const onChange = (e) => {\r\n        const { value, name } = e.target; // 우선 e.target 에서 name 과 value 를 추출\r\n        setNewReply({\r\n          ...newReply, // 기존의 input 객체를 복사한 뒤\r\n          [name]: value // name 키를 가진 값을 value 로 설정\r\n        });\r\n    };\r\n\r\n    \r\n    // 폼이 제출되면 실행 [댓글 등록]\r\n    const onSubmit = (e) => {\r\n        e.preventDefault(); // submit시 페이지 reload 방지\r\n        let addReply = newReply // 신규 추가 댓글\r\n        let peopleWhoReply = props.post.peopleWhoReply // 댓글 리스트\r\n        let replies = props.post.replies // 댓글 수\r\n\r\n        // console.log(\"신규 댓글 --> \",addReply)\r\n        // 기존 댓글 리스트에 밀어넣자\r\n        peopleWhoReply.push(addReply)\r\n\r\n        //=========================================================\r\n        // 수정 firebase 태우기, 변경하는 필드를 객체 형식으로 넣어준다\r\n        //=========================================================\r\n        replies++; // 댓글 수 +1\r\n        editDocument({ peopleWhoReply, replies }, props.post.id)\r\n        .then(()=>{\r\n            // 모달 끄고\r\n            dispatch(setRmVisible(false))\r\n        })\r\n    }\r\n\r\n    // 초기 mount 시\r\n    useEffect(()=>{\r\n        setFade('transition-end')\r\n    },[])\r\n\r\n    // Esc로 모달 끄기\r\n    window.onkeydown = (e) => {\r\n        if(e.key === 'Escape') {\r\n            console.log('꾸')\r\n        }\r\n    }\r\n    window.onkeyup = (e) => { \r\n        if(e.key === 'Escape') {\r\n            console.log('욱')\r\n            dispatch(setRmVisible(false))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* 뒤에 요소들 덮어서 모달만 보이게 */}\r\n            <div className={`dimmed-layer ${fade}`}/>\r\n\r\n            <div className={`input-area transition-start ${fade}`}>\r\n                <div className=\"form-container\">\r\n                    <form onSubmit={onSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"text\" name=\"replyText\" value={replyText} onChange={onChange} className=\"form-control reply-text-input\" placeholder=\"내용을 입력해 주세요!\" required/>\r\n                        </div>\r\n                        <input type=\"submit\" className=\"post-btn\" value=\"댓글 달기\"/>\r\n                        <div className=\"close-btn\">\r\n                            <CloseBtn onClick={(e)=>{\r\n                                e.preventDefault()\r\n                                dispatch(setRmVisible(false))\r\n                            }}/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ReplyInput;\r\n\r\n\r\nconst CloseBtn = (props) => (\r\n    <svg\r\n        // width=\"800px\"\r\n        // height=\"800px\"\r\n        viewBox=\"0 0 16 16\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        fill=\"none\"\r\n        {...props}\r\n    >\r\n    <title>{\"close\"}</title>\r\n    <path\r\n      fill=\"#FFFFFF\"\r\n      d=\"M12.78 4.28a.75.75 0 00-1.06-1.06L8 6.94 4.28 3.22a.75.75 0 00-1.06 1.06L6.94 8l-3.72 3.72a.75.75 0 101.06 1.06L8 9.06l3.72 3.72a.75.75 0 101.06-1.06L9.06 8l3.72-3.72z\"\r\n    />\r\n  </svg>\r\n);","/*eslint-disable */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setLmVisible } from \"../store/likeSlice\"; \r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction LikeDetail(props) {\r\n    let [fade, setFade] = useState('') // Animation Style State\r\n    let [likeList, setLikeList] = useState([]); // 필터링한 정보를 여기에 담아준다 --> 좋아요 리스트\r\n    let dispatch = useDispatch()\r\n    let navigate = useNavigate()\r\n\r\n    // 상단으로 스크롤 이동\r\n    const scrollTop = () => {\r\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    }\r\n\r\n    // 프로필 페이지 이동\r\n    const goProfile = (val) => {\r\n        navigate(`/profile/${val}`)\r\n        scrollTop()\r\n        \r\n        // **새로고침 해버리자**\r\n        window.location.reload();\r\n    }\r\n\r\n    // 초기 mount 시\r\n    useEffect(()=>{\r\n        setFade('transition-end')\r\n\r\n        let likePeople = []\r\n        props.peopleWhoLike.map((a,i)=>{\r\n            props.users.forEach((el) => {\r\n                if (el.UID === a) {\r\n                    likePeople.push(el);   \r\n                }\r\n            });\r\n        })\r\n        // console.log(\"좋아요 상세 리스트 --> \",likePeople);\r\n\r\n        setLikeList(likePeople); // 필터링한 정보로 state 셋팅\r\n    },[])\r\n\r\n    // Esc로 모달 끄기\r\n    window.onkeydown = (e) => {\r\n        if(e.key === 'Escape') {\r\n            console.log('또')\r\n        }\r\n    }\r\n    window.onkeyup = (e) => { \r\n        if(e.key === 'Escape') {\r\n            console.log('잉')\r\n            dispatch(setLmVisible(false))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* 뒤에 요소들 덮어서 모달만 보이게 */}\r\n            <div className={`dimmed-layer-detail ${fade}`} onClick={()=>{dispatch(setLmVisible(false))}}/>\r\n            <div className={`like-detail-area transition-start ${fade}`}>\r\n                <div className=\"like-detail-container\">\r\n                    <h3 className=\"like-detail-header\">좋아하는 사람들</h3>\r\n                    {\r\n                        likeList.length !== 0 ?\r\n                            likeList.map((a,i)=>{\r\n                                return (\r\n                                    <div className=\"like-user-info\" key={a.UID} onClick={()=>{goProfile(a.UID)}}>\r\n                                        <div className=\"like-user-profileImage\">\r\n                                            <img src={a.profileImage} alt=\"프로필사진\"/>\r\n                                        </div>\r\n                                        <span className=\"like-user-name\">{a.displayName}</span>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        : \r\n                            <>\r\n                                <h3 className=\"like-no-user-text\">아직 좋아요가 없어요 😥</h3>\r\n                                <h4 className=\"like-no-user-text-small\">첫 좋아요를 눌러볼까요?</h4>\r\n                            </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LikeDetail;","/*eslint-disable */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useFirestore } from \"../hooks/useFirestore\";\r\nimport { useAuthContext } from \"../hooks/useAuthContext\";\r\nimport { useCollection } from '../hooks/useCollection';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ReplyInput from \"./ReplyInput\";\r\nimport { setRmVisible } from \"../store/replySlice\";\r\nimport { setLmVisible } from \"../store/likeSlice\";\r\nimport LikeDetail from \"./LikeDetail\";\r\n\r\nfunction Detail(props) {\r\n  const { editDocument, deleteDocument, response } = useFirestore(\"FeedData\");// 컬렉션 이름 파라미터로 넣어주기\r\n  const { documents : AllFeed } = useCollection(\"FeedData\"); // 전체 게시글 데이터\r\n  const { documents : Users } = useCollection(\"UserData\"); // 전체 유저 데이터 ( 좋아요 상세에 props로 전송 )\r\n  const { isAuthReady, user } = useAuthContext();\r\n  let [fade, setFade] = useState('') // Animation Style State\r\n  let {uid} = useParams() // 게시물 id 키값 (URL 파라미터)\r\n  let [post, setPost] = useState([]) // 데이터 바인딩할 상세 정보 State\r\n  let [ready, setReady] = useState(false)\r\n  let navigate = useNavigate() // 페이지 이동\r\n  let dispatch = useDispatch()\r\n  const rmVisible = useSelector((state) => state.replyState.rmVisible) // 댓글 모달 표시 여부 ( reply modal )\r\n  const lmVisible = useSelector((state) => state.likeState.lmVisible) // 좋아요 상세 모달 여부\r\n  const THIS_YEAR = new Date().getFullYear(); // 현재 년도\r\n  const loginUserInfo = useSelector((state) => state.loginUserInfo) // 로그인 유저 정보, (Input.js 에서 초기 셋팅)\r\n\r\n  // 뒤로가기 + 상단으로 스크롤 이동\r\n  const goBack = () => {\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    window.history.back() // 뒤로가기\r\n  }\r\n\r\n  // 상단으로 스크롤 이동\r\n  const scrollTop = () => {\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n  }\r\n\r\n  // 프로필 페이지 이동\r\n  const goProfile = (val) => {\r\n    navigate(`/profile/${val}`)\r\n    scrollTop()\r\n    \r\n    // **새로고침 해버리자**\r\n    window.location.reload();\r\n  }\r\n\r\n  useEffect(()=>{\r\n    // Automatic batching 때문에 타이머 준다\r\n    let timer = setTimeout(() => {setFade('transition-end')}, 100)\r\n    // document.body.style.overflow = 'hidden' // 스크롤 제거 ( 하려했는데 사진 크기 때문에 필요할 수도.. 일단 보류 )\r\n\r\n    // cleanUp Func\r\n    return () => {\r\n      clearTimeout(timer)\r\n      setFade('')\r\n      setReady(false)\r\n      // document.body.style.overflow = ''\r\n    }\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    // AllFeed 받아오면 a.id가 같은 것을 post 에 담아주기\r\n    setPost(AllFeed?.filter((a,i)=> a.id === uid))\r\n  }, [AllFeed])\r\n\r\n  useEffect(()=>{\r\n    // 데이터 받아오는 과정에서 undefined 되는 경우가 있어서 예외처리 해줬다..\r\n    post != undefined && post.length !== 0 ? setReady(true) : setReady(false)\r\n  }, [post])\r\n\r\n\r\n  //============================================== \r\n  // 좋아요 눌린 상태에 따른 버튼 이미지 반환\r\n  //============================================== \r\n  const getLikeStatus = (likeYN) => {\r\n    if (likeYN) {\r\n      return (\r\n        <svg aria-label=\"좋아요 취소\" color=\"#ed4956\" fill=\"#ed4956\"\r\n              height=\"24\" role=\"img\" viewBox=\"0 0 48 48\" width=\"24\">\r\n                <path d=\"M34.6 3.1c-4.5 0-7.9 1.8-10.6 5.6-2.7-3.7-6.1-5.5-10.6-5.5C6 \r\n                 3.1 0 9.6 0 17.6c0 7.3 5.4 12 10.6 16.5.6.5 1.3 1.1 1.9 1.7l2.3 \r\n                 2c4.4 3.9 6.6 5.9 7.6 6.5.5.3 1.1.5 1.6.5s1.1-.2 1.6-.5c1-.6 \r\n                 2.8-2.2 7.8-6.8l2-1.8c.7-.6 1.3-1.2 2-1.7C42.7 29.6 48 \r\n                 25 48 17.6c0-8-6-14.5-13.4-14.5z\">\r\n                </path>\r\n        </svg>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <svg aria-label=\"좋아요\" color=\"#262626\" fill=\"#262626\"\r\n              height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                <path d=\"M16.792 3.904A4.989 4.989 0 0121.5 9.122c0 3.072-2.652 4.959-5.197\r\n                  7.222-2.512 2.243-3.865 3.469-4.303 3.752-.477-.309-2.143-1.823-4.303-3.752C5.141\r\n                  14.072 2.5 12.167 2.5 9.122a4.989 4.989 0 014.708-5.218 4.21 4.21 0 013.675\r\n                    1.941c.84 1.175.98 1.763 1.12 1.763s.278-.588 1.11-1.766a4.17 4.17 0 013.679-1.938m0-2a6.04\r\n                    6.04 0 00-4.797 2.127 6.052 6.052 0 00-4.787-2.127A6.985 6.985 0 00.5 9.122c0 3.61\r\n                      2.55 5.827 5.015 7.97.283.246.569.494.853.747l1.027.918a44.998 44.998 0 003.518 3.018\r\n                      2 2 0 002.174 0 45.263 45.263 0 003.626-3.115l.922-.824c.293-.26.59-.519.885-.774\r\n                        2.334-2.025 4.98-4.32 4.98-7.94a6.985 6.985 0 00-6.708-7.218z\">\r\n                </path>\r\n        </svg>\r\n      )\r\n    }\r\n  }\r\n\r\n  //============================================== \r\n  // 저장 상태에 따른 버튼 이미지 반환\r\n  //============================================== \r\n  const getSaveStatus = (saveYn) => {\r\n    if (saveYn) {\r\n      return (\r\n        <svg aria-label=\"저장 취소\" color=\"#262626\" fill=\"#262626\"\r\n          height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n          <polygon points=\"20 21 12 13.44 4 21 4 3 20 3 20 21\"\r\n            stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n          </polygon>\r\n        </svg>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <svg aria-label=\"저장\" color=\"#262626\" fill=\"#262626\"\r\n          height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n          <polygon fill=\"none\" points=\"20 21 12 13.44 4 21 4 3 20 3 20 21\"\r\n            stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n          </polygon>\r\n        </svg>\r\n      )\r\n    }\r\n  }\r\n\r\n  // 게시물 삭제\r\n  const postDelete = () => {\r\n    if (confirm(\"게시물을 삭제하시겠어요?\")) {\r\n      //=========================  \r\n      // firebase 삭제\r\n      //=========================  \r\n      deleteDocument(post[0].id)\r\n      alert('게시물이 삭제됐어요!')\r\n      goBack() // 이전 페이지로 이동 ( 디테일 페이지에서 보여줄 게 없으니까.. )\r\n    }\r\n  }\r\n\r\n  // 댓글 삭제\r\n  const replyDelete = (reply) => {\r\n    if (confirm(\"이 댓글을 삭제하시겠어요?\")) {\r\n      // console.log(\"삭제할 댓글 --> \", reply);\r\n    \r\n      let peopleWhoReply = [...post[0].peopleWhoReply] // 기존 댓글 리스트\r\n      \r\n      // UID + replyText 의 값이 다른 것만 뽑아주기 ( 삭제할 댓글만 제외시키기 )\r\n      peopleWhoReply = peopleWhoReply.filter((val)=>val.UID+val.replyText !== reply.UID+reply.replyText)\r\n      let replies = peopleWhoReply.length; // 댓글 수 맞춰주기\r\n\r\n      // console.log(\"댓글 삭제 결과 --> \", peopleWhoReply, replies);\r\n      //=========================  \r\n      // firebase 수정\r\n      //=========================  \r\n      editDocument({ peopleWhoReply, replies }, post[0].id)\r\n    }\r\n  }\r\n\r\n  // 보내기 버튼 - 카카오 공유, **원래 개발자 모드 모바일에서는 동작하지 않음**\r\n  const kakaoShare = (post) => {\r\n    // console.log(\"공유할 게시물 --> \",post);\r\n    if(confirm(\"카카오톡으로 공유하시겠어요?\")){\r\n      // 카카오톡 공유 로직 실행\r\n      Kakao.Share.sendDefault({\r\n        objectType: 'feed',\r\n        content: {\r\n          title: post.displayName,\r\n          description: post.postText+'\\n'+post.createdDate,\r\n          imageUrl:\r\n            post.downloadURL.includes('mov') || post.downloadURL.includes('mp4') || post.downloadURL.includes('m4v') ?\r\n              // 동영상인 경우 썸네일 만들면 좋은데.. 잘 모르겠어서 일단 업로드 해놓은 영상재생 아이콘을 보낸다\r\n              `https://firebasestorage.googleapis.com/v0/b/our-daily-life-a5c62.appspot.com/o/images%2Fvideo_icon.jpg?alt=media&token=468de73a-e6cc-4e28-8f14-35887673d630`\r\n            : \r\n              post.downloadURL,\r\n          link: {\r\n            mobileWebUrl: window.location.href,\r\n            webUrl: window.location.href,\r\n          },\r\n        },\r\n        social: {\r\n          likeCount: post.likes,\r\n          commentCount: post.replies,\r\n          sharedCount: post.shares,\r\n        },\r\n        buttons: [\r\n          {\r\n            title: '보러가기',\r\n            link: {\r\n              mobileWebUrl: window.location.href,\r\n              webUrl: window.location.href,\r\n            },\r\n          }\r\n        ],\r\n      });\r\n\r\n      // 보내기 +1\r\n      let shares = post.shares + 1\r\n      editDocument({ shares }, post.id)\r\n    }\r\n  }\r\n\r\n  return (\r\n    ready ?\r\n    <>\r\n    <div className={`all-feeds transition-start ${fade}`}>\r\n      <article className={`Post transition-start ${fade}`}>\r\n        <div className=\"Post-area\">\r\n\r\n          {/* 프로필 영역 */}\r\n          <div className=\"Post-user-area\">\r\n            <div className=\"Post-writer-info\" onClick={()=>goProfile(post[0].UID)}>\r\n              <div className=\"Post-user-profileImage\">\r\n                <img src={post[0].profileImage} alt=\"프로필사진\"/>\r\n              </div>\r\n              <span className=\"Post-user-id\">{post[0].displayName}</span>\r\n            </div>\r\n            {\r\n              // 내 글 --> 삭제버튼 표시\r\n              loginUserInfo.UID === post[0].UID ?\r\n                <div className=\"Post-delete-btn\">\r\n                  <DeleteBtn onClick={postDelete}/>\r\n                </div>\r\n              :\r\n                null\r\n            }\r\n          </div>\r\n\r\n          {/* 이미지 영역 */}\r\n          <div className=\"Post-img\">\r\n            <div className=\"Post-img-bg\">\r\n              {\r\n                // 동영상 / 사진 분기처리\r\n                post[0].downloadURL.includes('mov') || post[0].downloadURL.includes('mp4') || post[0].downloadURL.includes('m4v') ?\r\n                  // +`#t=0.001` 추가해서 첫 프레임으로 미리보기를 구현할 수 있음\r\n                  <video src={post[0].downloadURL+`#t=0.001`} controls/>\r\n                :\r\n                  <img src={post[0].downloadURL} alt=\"게시물사진\"/>\r\n              }\r\n            </div>\r\n          </div>\r\n\r\n          {/* 버튼 영역 */}\r\n          <div className=\"Post-icon-btn-area\">\r\n            <div className=\"three-btn-area\">\r\n              <button className=\"like-btn\" onClick={(e) => {\r\n                // 좋아요 갯수\r\n                let likes = post[0].likes\r\n                // 좋아요 여부\r\n                let isLiked = post[0].peopleWhoLike.includes(user.uid)\r\n                // 좋아요 누른 사람들\r\n                let peopleWhoLike = [...post[0].peopleWhoLike]\r\n                if (peopleWhoLike.includes(user.uid)) {\r\n                  peopleWhoLike = peopleWhoLike.filter(a => a != user.uid)\r\n                } else {\r\n                  peopleWhoLike.push(user.uid)\r\n                }\r\n                \r\n                if (isLiked) {\r\n                  console.log('좋아요 취소')\r\n                } else {\r\n                  console.log('좋아요')\r\n                }\r\n                // console.log('좋아하는 사람들', peopleWhoLike)\r\n\r\n                //=========================================================\r\n                // 수정 firebase 태우기, 변경하는 필드를 객체 형식으로 넣어준다\r\n                //=========================================================\r\n                if (isLiked) {\r\n                  likes--;\r\n                  editDocument({ peopleWhoLike, likes }, post[0].id)\r\n                } else {\r\n                  likes++;\r\n                  editDocument({ peopleWhoLike, likes }, post[0].id)\r\n                }\r\n              }}>\r\n                {/* 받아온 props를 확인해서 좋아요 버튼 반환*/}\r\n                {getLikeStatus(post[0].peopleWhoLike.includes(user.uid))}\r\n              </button>\r\n              {/* 댓글 작성 버튼 */}\r\n              <button className=\"reply-btn\" onClick={(e) => {\r\n                dispatch(setRmVisible(true))\r\n              }}>\r\n                <svg aria-label=\"댓글쓰기\" color=\"#262626\" fill=\"#262626\"\r\n                height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                  <path d=\"M20.656 17.008a9.993 9.993 0 10-3.59 3.615L22 22z\" fill=\"none\"\r\n                  stroke=\"currentColor\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n                  </path>\r\n                </svg>\r\n              </button>\r\n              {/* 공유 버튼 - 카카오 공유하기 */}\r\n              <button className=\"share-btn\" onClick={() => {\r\n                kakaoShare(post[0]);\r\n              }}>\r\n                <svg aria-label=\"보내기\" color=\"#262626\" fill=\"#262626\"\r\n                height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                  <line fill=\"none\" stroke=\"currentColor\" strokeLinejoin=\"round\"\r\n                    strokeWidth=\"2\" x1=\"22\" x2=\"9.218\" y1=\"3\" y2=\"10.083\">\r\n                  </line>\r\n                  <polygon fill=\"none\" points=\"11.698 20.334 22 3.001 2 3.001 9.218 10.084 11.698 20.334\"\r\n                  stroke=\"currentColor\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n                  </polygon>\r\n                </svg>\r\n              </button>\r\n            </div>\r\n\r\n            {/* 떨어뜨린 곳에 저장 버튼 */}\r\n            <div className=\"one-btn-area\">\r\n              <button className=\"save-btn\" onClick={(e) => {\r\n                // 저장 여부\r\n                let isSaved = post[0].peopleWhoSave.includes(user.uid)\r\n                // 저장한 사람들\r\n                let peopleWhoSave = [...post[0].peopleWhoSave]\r\n                if (peopleWhoSave.includes(user.uid)) {\r\n                  peopleWhoSave = peopleWhoSave.filter(a => a != user.uid)\r\n                } else {\r\n                  peopleWhoSave.push(user.uid)\r\n                }\r\n                \r\n                if (isSaved) {\r\n                  alert('게시물을 보관함에서 삭제할게요!')\r\n                } else {\r\n                  alert('게시물을 보관함에 추가할게요!')\r\n                }\r\n                // console.log('저장한 사람들', peopleWhoSave)\r\n\r\n                //=========================================================\r\n                // 수정 firebase 태우기, 변경하는 필드를 객체 형식으로 넣어준다\r\n                //=========================================================\r\n                if (isSaved) {\r\n                  editDocument({ peopleWhoSave }, post[0].id)\r\n                } else {\r\n                  editDocument({ peopleWhoSave }, post[0].id)\r\n                }\r\n              }}>\r\n                {/* 받아온 props를 확인해서 저장 버튼 반환*/}\r\n                {getSaveStatus(post[0].peopleWhoSave.includes(user.uid))}\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 좋아요 Count */}\r\n          <div className=\"Post-like-area\">\r\n            <p className=\"Post-like-count\" onClick={()=>{\r\n              dispatch(setLmVisible(true)) // 좋아요 상세 모달 표시\r\n            }}>\r\n              <b>{post[0].likes}</b>\r\n            </p>\r\n          </div>\r\n\r\n          {/* 좋아요 상세 */}\r\n          {\r\n            lmVisible ?\r\n            <LikeDetail users={Users} peopleWhoLike={post[0].peopleWhoLike}/>\r\n            : null\r\n          }\r\n\r\n          {/* 게시글 영역 */}\r\n          <div className=\"Post-text-area\">\r\n            <div className=\"Post-text\">\r\n              <div className=\"Post-writer-name\" onClick={()=>{goProfile(post[0].UID)}}>\r\n                <b>{post[0].displayName}</b>\r\n              </div>\r\n              <div className=\"Post-text-postText\">\r\n                {post[0].postText}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* 댓글 영역 */}\r\n          {\r\n            post[0].replies > 0 ?\r\n\r\n            <>\r\n              {/* 구분선 */}\r\n              <div className=\"Post-reply-border\"></div>\r\n              {/* 댓글 표시 */}\r\n              <div className=\"Post-reply-area\">\r\n                {\r\n                  post[0].peopleWhoReply.map((a,i)=>{\r\n                    return (\r\n                      <>\r\n                        <div className=\"Post-reply-with-btn\" key={a.UID}>\r\n                          <div className=\"Post-reply\">\r\n                            <span className=\"Post-reply-nickname\" onClick={()=>{goProfile(a.UID)}}>\r\n                              <b>{a.displayName}</b>\r\n                            </span>\r\n                            <span className=\"Post-reply-text\">\r\n                              {a.replyText}\r\n                            </span>\r\n                          </div>\r\n\r\n                          {\r\n                            // 내 글 --> 댓글 삭제버튼 표시\r\n                            loginUserInfo.UID === post[0].UID ?\r\n                              <div className=\"reply-delete-btn\" key={a.UID}>\r\n                                <DeleteReplyBtn onClick={()=>{replyDelete(a)}}/>\r\n                              </div>\r\n                            :\r\n                              null\r\n                          }\r\n                        </div>\r\n                      </>\r\n                    )\r\n                  })\r\n                }\r\n              </div>\r\n            </>\r\n\r\n            : null\r\n          }\r\n\r\n          {/* 작성일자 */}\r\n          <div className=\"post-date\">\r\n            { \r\n              // 작성년도가 올해와 같으면 년도는 표시하지 않기 \r\n              THIS_YEAR === post[0].createdDate.substring(0,4)*1\r\n              ? post[0].createdDate.substring(5,7) + \"월 \" + post[0].createdDate.substring(8,10) + \"일 \" + post[0].createdDate.substring(11)\r\n              : post[0].createdDate.substring(0,4)+\"년 \" + post[0].createdDate.substring(5,7) + \"월 \" + post[0].createdDate.substring(8,10) + \"일 \" + post[0].createdDate.substring(11)\r\n            }\r\n          </div>\r\n        </div>\r\n      </article>\r\n\r\n      <div className=\"detail-btn-area\">\r\n        <button className=\"go-main-btn\" onClick={goBack}>\r\n          돌아가기\r\n        </button>\r\n      </div>\r\n\r\n    </div>\r\n    {/* 댓글 등록 모달 */}\r\n    {\r\n      rmVisible ?\r\n      <ReplyInput post={post[0]}/>\r\n      : null\r\n    }\r\n\r\n    </>\r\n\r\n    : null\r\n  );\r\n}\r\n\r\nexport default Detail;\r\n\r\nconst DeleteBtn = (props) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"#000000\"\r\n    strokeWidth={1.4}\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    {...props}\r\n  >\r\n    <polyline points=\"3 6 5 6 21 6\" />\r\n    <path id=\"post-delete-btn\" d=\"M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2\" />\r\n  </svg>\r\n);\r\n\r\nconst DeleteReplyBtn = (props) => (\r\n  <svg\r\n    viewBox=\"0 0 24 24\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    fill=\"none\"\r\n    {...props}\r\n  >\r\n    <path\r\n      id=\"reply-delete-btn\"\r\n      opacity={0.5}\r\n      stroke=\"#000000\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      strokeWidth={1.4}\r\n      d=\"M12 12 7 7m5 5 5 5m-5-5 5-5m-5 5-5 5\"\r\n    />\r\n  </svg>\r\n);","/*eslint-disable */\r\n\r\n/**\r\n * 날짜 출력하는 함수\r\n * format: 포매팅 기호 (/,-,. 같은거)\r\n * addMonth: 월 더하기\r\n * addDay: 일 더하기\r\n * addYear: 년 더하기\r\n*/\r\nfunction today(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day;\r\n}\r\n\r\n/**\r\n * unique 숫자 구하기...\r\n*/\r\nfunction GetUniqueNum(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n    let milliseconds = date.getMilliseconds(); // 밀리초\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day+hour+min+milliseconds;\r\n}\r\n\r\n/**\r\n * 오늘 날짜 + 시간 출력하는 함수\r\n * dateFormat: 날짜 포매팅 기호 (/,-,. 같은거)\r\n * timeFormat: 시간 포매팅 기호 (/,-,. 같은거)\r\n*/\r\nfunction GetCurDayTime(dateFormat,timeFormat) {\r\n    return TimeString(dateFormat,timeFormat,new Date());\r\n}\r\n\r\nfunction TimeString (dateFormat='/',timeFormat=':',date) {\r\n        \r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1; // 1월=0,12월=11이므로 1 더함\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if ((\"\" + month).length === 1) {\r\n        month = \"0\" + month;\r\n    }\r\n    if ((\"\" + day).length === 1) {\r\n        day = \"0\" + day;\r\n    }\r\n    if ((\"\" + hour).length === 1) {\r\n        hour = \"0\" + hour;\r\n    }\r\n    if ((\"\" + min).length === 1) {\r\n        min = \"0\" + min;\r\n    }\r\n\r\n    return (\"\" + year+ dateFormat + month+ dateFormat + day+ \" \" + hour+ timeFormat + min)\r\n}\r\n\r\nexport {today, GetCurDayTime, TimeString, GetUniqueNum } ","/* eslint-disable*/\r\n// 컬렉션을 만들고 데이터를 넘겨주는 작업을 위한 훅\r\nimport { useReducer, useState } from \"react\"\r\nimport { appFireStore, timestamp, storage } from \"../firebase/config\"\r\nimport { addDoc, updateDoc, deleteDoc, doc, collection } from \"firebase/firestore\"\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { GetCurDayTime, GetUniqueNum }  from \"../utils/DateUtil.js\"\r\n\r\n\r\n// 우리가 받을 응답을 저장할 객체 (객체이기 때문에 리듀서로 관리)\r\n// 상태를 관리할 때 error나 isPending을 useReducer로 한번에 관리\r\n\r\n/**\r\n * document : 파이어스토어에 document의 생성을 요청하면 우리가 생성한 document를 반환\r\n *            파이어스토어의 데이터 저장 단위\r\n * isPending: 통신중인지 아닌지 상태\r\n * success : 요청에 대한 응답의 성공 유무\r\n */\r\nconst initState = {\r\n    document: null,\r\n    isPending: false,\r\n    error: null,\r\n    success: false\r\n}\r\n\r\n// 전달 받는 action에 따른 state 업데이트\r\nconst storeReducer = (state, action) => {\r\n    /**case 마다 데이터가 다 달라서 spread operator 안쓰고 그냥 적음... */\r\n    switch (action.type) {\r\n        case 'isPending':\r\n            return { isPending: true, document: null,            success: false, error: null }\r\n        case 'addDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'editDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'deleteDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'error':\r\n            return { isPending: false, document: null,           success: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// transaction: 우리가 데이터를 저장할 컬렉션(폴더)\r\nexport const useFirestore = (transaction) => {\r\n\r\n    // response에 요청에 대한 firestore 의 응답 저장\r\n    // 저장되는 데이터 === 저장 성공 또는 요청한 문서 데이터(객체)\r\n    const [response, dispatch] = useReducer(storeReducer, initState);\r\n    const [imgUrl, setImgUrl] = useState([]);\r\n    // colRef : 만들 컬렉션의 참조 (컬렉션 이름)\r\n\t// 원하는 컬렉션의 참조를 인자로 보내주면 파이어스토어가 자동으로 해당 컬렉션을 생성해줌 \r\n    const colRef = collection(appFireStore, transaction);\r\n\r\n    \r\n    // 컬렉션에 문서를 저장(이미지 저장 시)\r\n    const addDocument = async (doc,pic) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n        // 이미지 업로드 경로 저장\r\n        const storageRef = ref(storage, 'images/'+pic.name );\r\n        const uploadTask = uploadBytesResumable(storageRef, pic);\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n            /*===============================================\r\n             * 이미지 저장\r\n             *===================================================*/\r\n\r\n            uploadTask.on('state_changed', \r\n            (snapshot) => {\r\n                null\r\n            }, \r\n            (error) => {\r\n                console.error('실패 사유 --> ', error);\r\n            }, \r\n            () => {\r\n              getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                \r\n                console.log('업로드 경로 --> ', downloadURL);\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬렉션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe, downloadURL});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');             \r\n              });\r\n            }\r\n          );\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에 문서를 저장(댓글 저장)\r\n    const addComment = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬렉션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에서 문서를 수정\r\n    const editDocument = async (documents,id) => {\r\n        dispatch({ type: \"isPending\" });\r\n        \r\n        // const 임시 = doc(appFireStore,'diary',id);\r\n\r\n        try {\r\n            // // 수정 날짜가 필요할 경우 사용하면 됨\r\n            // const createdTime = timestamp.fromDate(new Date());\r\n            // const createdDate = GetCurDayTime('/',':');\r\n\r\n            // docRef : 참조(컬렉션 이름)\r\n            // updateDoc : 컬렉션에 있는 문서 수정\r\n            // const docRef = await updateDoc(doc(colRef,id),{ ...documents, createdTime,createdDate});\r\n            const docRef = await updateDoc(doc(colRef,id),{ ...documents});\r\n            dispatch({ type: 'editDoc', payload: docRef });\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n        \r\n    // 컬렉션에서 문서를 삭제\r\n    const deleteDocument = async (id) => {\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n            const docRef = await deleteDoc(doc(colRef,id));\r\n            dispatch({ type: 'deleteDoc', payload: docRef });\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n    \r\n    // 유저 최초 저장 ( 회원가입 )\r\n    const addUser = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n            /*===============================================\r\n            * 데이터 저장\r\n            *===================================================*/\r\n            // docRef : 참조(컬렉션 이름)\r\n            // addDoc : 컬렉션에 문서를 추가\r\n            const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n            console.log(docRef);\r\n\r\n            dispatch({ type: 'addDoc', payload: docRef });\r\n            console.log('저장완료');\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n    return { addDocument, addComment, editDocument, deleteDocument, addUser, response }\r\n\r\n}"],"names":["props","useFirestore","editDocument","dispatch","response","useDispatch","loginUserInfo","useSelector","state","useState","fade","setFade","displayName","UID","replyText","newReply","setNewReply","useEffect","window","onkeydown","e","key","console","log","onkeyup","setRmVisible","className","onSubmit","preventDefault","addReply","peopleWhoReply","post","replies","push","id","then","type","name","value","onChange","target","placeholder","required","CloseBtn","onClick","viewBox","xmlns","fill","d","likeList","setLikeList","navigate","useNavigate","goProfile","val","scrollTo","top","behavior","location","reload","likePeople","peopleWhoLike","map","a","i","users","forEach","el","setLmVisible","length","src","profileImage","alt","saveYn","likeYN","deleteDocument","AllFeed","useCollection","documents","Users","useAuthContext","user","isAuthReady","uid","useParams","setPost","ready","setReady","rmVisible","replyState","lmVisible","likeState","THIS_YEAR","Date","getFullYear","goBack","history","back","timer","setTimeout","clearTimeout","filter","undefined","DeleteBtn","confirm","alert","downloadURL","includes","controls","likes","isLiked","color","height","role","width","stroke","strokeLinejoin","strokeWidth","Kakao","Share","sendDefault","objectType","content","title","description","postText","createdDate","imageUrl","link","mobileWebUrl","href","webUrl","social","likeCount","commentCount","sharedCount","shares","buttons","kakaoShare","x1","x2","y1","y2","points","isSaved","peopleWhoSave","strokeLinecap","DeleteReplyBtn","reply","replyDelete","substring","opacity","GetUniqueNum","format","addMonth","addDay","addYear","date","year","month","getMonth","day","getDate","hour","getHours","min","getMinutes","milliseconds","getMilliseconds","setMonth","setDate","setFullYear","slice","GetCurDayTime","dateFormat","timeFormat","TimeString","initState","document","isPending","error","success","storeReducer","action","payload","transaction","useReducer","colRef","collection","appFireStore","addDocument","doc","pic","createdTime","timestamp","createdUqe","storageRef","ref","storage","uploadTask","uploadBytesResumable","on","snapshot","getDownloadURL","docRef","addDoc","message","addComment","updateDoc","deleteDoc","addUser"],"sourceRoot":""}