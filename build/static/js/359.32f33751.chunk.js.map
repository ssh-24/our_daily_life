{"version":3,"file":"static/js/359.32f33751.chunk.js","mappings":"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","sources":["components/Feeds.js","hooks/useCollection.js","components/Post.js","utils/DateUtil.js","hooks/useFirestore.js"],"sourcesContent":["/*eslint-disable */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Post from \"./Post\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useCollection } from '../hooks/useCollection';\r\nimport { setUserList } from \"../store/searchSlice\";\r\n\r\nfunction Feeds() {\r\n    const postList = useSelector((state) => state.feeds); // 로컬 샘플 데이터\r\n    const {documents,error} = useCollection(\"FeedData\"); // 서버 리얼 데이터\r\n    let [fade, setFade] = useState('') // Animation Style State\r\n    let dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        console.log('Mock Data',postList)\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        console.log('Server Data',documents)\r\n        setFade(documents!= null && documents.length > 0? 'transition-end': '') // 애니메이션 효과\r\n\r\n        // 전체 글의 사용자 정보(UID , displayName)를 받아서 redux store에 넣기\r\n        let users = [] // 전체 유저\r\n        // 있을 때만 돌립시다?\r\n        documents?.map((a,i)=>{\r\n            users.push({UID : a.UID, Name : a.displayName})\r\n        });\r\n        let uniqUsers = [] // 중복 X 유저\r\n        // 중복 제거\r\n        uniqUsers = users.reduce((acc, cur)=>{\r\n            if (acc.findIndex(({ UID }) => UID === cur.UID) === -1) {\r\n                acc.push(cur)\r\n            }\r\n            return acc;\r\n        }, []);\r\n        console.log(\"유저 목록쓰\", uniqUsers)\r\n        dispatch(setUserList(uniqUsers))\r\n    }, [documents])\r\n\r\n    return (\r\n        <>\r\n            <div className={`all-feeds transition-start ${fade}`}>\r\n                {/* 리얼 데이터 출력 */}\r\n                {\r\n                    documents ? \r\n                    documents.map((a,i) => {\r\n                        let post = {...a}\r\n                        return (<Post key={i+postList.length} post={post}/>) \r\n                    })\r\n                    : null\r\n                }\r\n\r\n                {/* 샘플 데이터 출력 */}\r\n                {\r\n                    postList.map((a,i) => {\r\n                        return (<Post key={i+1} post={a} />)\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Feeds;","/* eslint-disable*/\r\n\r\n// 컬렉션에 접근하여 데이터를 불러오는 기능을 위한 훅\r\n// 메인화면에서 사용\r\nimport { appFireStore } from \"../firebase/config\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { onSnapshot,collection,query,where, orderBy } from \"firebase/firestore\";\r\n\r\nexport const useCollection = (transaction) => {\r\n\r\n    // documents 데이터 관리, error 관리\r\n    const [documents, setDocuments] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 💛 collection에 변화가 생길때마다 실행합니다. 때문에 항상 최신의 컬랙션 상태를 반환 받을 수 있습니다.\r\n    useEffect(() => {\r\n        let q;\r\n            q = query(collection(appFireStore, transaction),orderBy(\"createdTime\",\"desc\"));\r\n            \r\n        // onSnapshot: 가장 최근 컬랙션의 내용 반환 \r\n        // unsubscribe: 데이터 수신을 중단(데이터 오는거 기다릴 필요가 없을때 사용.)\r\n        // const unsubscribe = onSnapshot(myQuery ? q : (collection(appFireStore, transaction)),\r\n        const unsubscribe = onSnapshot(q ,\r\n            \r\n            // 응답받은 컬랙션을 snapshot에 저장\r\n            (snapshot) => {\r\n                let result = [];\r\n                // 배열형태로 저장되어있음 => forEach 사용\r\n                snapshot.docs.forEach((doc) => {\r\n                    // document 데이터랑 id 값 push 해주기\r\n                    result.push({ ...doc.data(), id: doc.id });\r\n                })\r\n\r\n                setDocuments(result);\r\n                setError(null);\r\n            },\r\n            (error) => {\r\n                setError(error.message);\r\n            });\r\n            \r\n        //💛 외부에서 데이터를 구독하는 경우 clean-up 함수는 useEffect훅을 사용하는 컴포넌트가 마운트 해제될때 실행되어 구독을 종료하게 됩니다.\r\n        return unsubscribe; // clean-up 함수\r\n\r\n    }, [collection])// 매번 실행될 필요가 없고, 컬랙션 변화가 \r\n    return { documents, error }\r\n}","/*eslint-disable */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useFirestore } from \"../hooks/useFirestore\";\r\nimport { useAuthContext } from \"../hooks/useAuthContext\";\r\n\r\nfunction Post(props) {\r\n  const { editDocument, response } = useFirestore(\"FeedData\");// 컬렉션 이름 파라미터로 넣어주기\r\n  const { isAuthReady, user } = useAuthContext();\r\n  let [fade, setFade] = useState('') // Animation Style State\r\n\r\n  useEffect(()=>{\r\n    // Automatic batching 때문에 타이머 준다\r\n    let timer = setTimeout(() => {setFade('transition-end')}, 100)\r\n    // cleanUp Func\r\n    return () => {\r\n      clearTimeout(timer)\r\n      setFade('')\r\n    }\r\n  },[])\r\n\r\n  // 좋아요 눌린 상태에 따른 버튼 이미지 반환\r\n  const getLikeStatus = (likeYN) => {\r\n    if (likeYN) {\r\n      return (\r\n        <svg aria-label=\"좋아요 취소\" color=\"#ed4956\" fill=\"#ed4956\"\r\n              height=\"24\" role=\"img\" viewBox=\"0 0 48 48\" width=\"24\">\r\n                <path d=\"M34.6 3.1c-4.5 0-7.9 1.8-10.6 5.6-2.7-3.7-6.1-5.5-10.6-5.5C6 \r\n                 3.1 0 9.6 0 17.6c0 7.3 5.4 12 10.6 16.5.6.5 1.3 1.1 1.9 1.7l2.3 \r\n                 2c4.4 3.9 6.6 5.9 7.6 6.5.5.3 1.1.5 1.6.5s1.1-.2 1.6-.5c1-.6 \r\n                 2.8-2.2 7.8-6.8l2-1.8c.7-.6 1.3-1.2 2-1.7C42.7 29.6 48 \r\n                 25 48 17.6c0-8-6-14.5-13.4-14.5z\">\r\n                </path>\r\n        </svg>\r\n      )\r\n    }\r\n    else {\r\n      return (\r\n        <svg aria-label=\"좋아요\" color=\"#262626\" fill=\"#262626\"\r\n              height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                <path d=\"M16.792 3.904A4.989 4.989 0 0121.5 9.122c0 3.072-2.652 4.959-5.197\r\n                  7.222-2.512 2.243-3.865 3.469-4.303 3.752-.477-.309-2.143-1.823-4.303-3.752C5.141\r\n                  14.072 2.5 12.167 2.5 9.122a4.989 4.989 0 014.708-5.218 4.21 4.21 0 013.675\r\n                    1.941c.84 1.175.98 1.763 1.12 1.763s.278-.588 1.11-1.766a4.17 4.17 0 013.679-1.938m0-2a6.04\r\n                    6.04 0 00-4.797 2.127 6.052 6.052 0 00-4.787-2.127A6.985 6.985 0 00.5 9.122c0 3.61\r\n                      2.55 5.827 5.015 7.97.283.246.569.494.853.747l1.027.918a44.998 44.998 0 003.518 3.018\r\n                      2 2 0 002.174 0 45.263 45.263 0 003.626-3.115l.922-.824c.293-.26.59-.519.885-.774\r\n                        2.334-2.025 4.98-4.32 4.98-7.94a6.985 6.985 0 00-6.708-7.218z\">\r\n                </path>\r\n        </svg>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <article className={`Post transition-start ${fade}`}>\r\n      <div className=\"Post-area\">\r\n\r\n        {/* 프로필 영역 */}\r\n        <div className=\"Post-user-area\">\r\n          <div className=\"Post-user-profileImage\">\r\n            <img src={props.post.profileImage} alt=\"프로필사진\"/>\r\n          </div>\r\n          <span className=\"Post-user-id\">\r\n            {\r\n              props.post.displayName != null && props.post.displayName.length > 0 ?\r\n              props.post.displayName\r\n              : props.post.userEmail\r\n            }\r\n          </span>\r\n        </div>\r\n\r\n        {/* 이미지 영역 */}\r\n        <div className=\"Post-img\">\r\n          <div className=\"Post-img-bg\">\r\n            <img src={props.post.downloadURL} alt=\"게시물사진\"/>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 버튼 영역 */}\r\n        <div className=\"Post-icon-btn-area\">\r\n          <div className=\"three-btn-area\">\r\n            <button className=\"like-btn\" onClick={(e) => {\r\n              // 좋아요 갯수\r\n              let likes = props.post.likes\r\n              // 좋아요 여부\r\n              let isLiked = props.post.peopleWhoLike.includes(user.uid)\r\n              // 좋아요 누른 사람들\r\n              let peopleWhoLike = [...props.post.peopleWhoLike]\r\n              if (peopleWhoLike.includes(user.uid)) {\r\n                peopleWhoLike = peopleWhoLike.filter(a => a != user.uid)\r\n              } else {\r\n                peopleWhoLike.push(user.uid)\r\n              }\r\n              \r\n              if (isLiked) {\r\n                console.log('좋아요 취소')\r\n              } else {\r\n                console.log('좋아요')\r\n              }\r\n              console.log('좋아하는 사람들', peopleWhoLike)\r\n\r\n              //=========================================================\r\n              // 수정 firebase 태우기, 변경하는 필드를 객체 형식으로 넣어준다\r\n              //=========================================================\r\n              if (isLiked) {\r\n                likes--;\r\n                editDocument({ peopleWhoLike, likes }, props.post.id)\r\n              } else {\r\n                likes++;\r\n                editDocument({ peopleWhoLike, likes }, props.post.id)\r\n              }\r\n            }}>\r\n              {/* 받아온 props를 확인해서 좋아요 버튼 반환*/}\r\n              {getLikeStatus(props.post.peopleWhoLike.includes(user.uid))}\r\n            </button>\r\n            \r\n            <button className=\"reply-btn\" onClick={(e) => {\r\n               alert('댓글쓰기')\r\n            }}>\r\n              <svg aria-label=\"댓글쓰기\" color=\"#262626\" fill=\"#262626\"\r\n              height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                <path d=\"M20.656 17.008a9.993 9.993 0 10-3.59 3.615L22 22z\" fill=\"none\"\r\n                 stroke=\"currentColor\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n                </path>\r\n              </svg>\r\n            </button>\r\n\r\n            <button className=\"share-btn\" onClick={(e) => {\r\n               alert('보내기')\r\n            }}>\r\n              <svg aria-label=\"보내기\" color=\"#262626\" fill=\"#262626\"\r\n              height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                <line fill=\"none\" stroke=\"currentColor\" strokeLinejoin=\"round\"\r\n                  strokeWidth=\"2\" x1=\"22\" x2=\"9.218\" y1=\"3\" y2=\"10.083\">\r\n                </line>\r\n                <polygon fill=\"none\" points=\"11.698 20.334 22 3.001 2 3.001 9.218 10.084 11.698 20.334\"\r\n                stroke=\"currentColor\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n                </polygon>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n\r\n          {/* 떨어뜨린 곳에 저장 버튼 */}\r\n          <div className=\"one-btn-area\">\r\n            <button className=\"save-btn\" onClick={(e) => {\r\n               alert('저장')\r\n            }}>\r\n              <svg aria-label=\"저장\" color=\"#262626\" fill=\"#262626\"\r\n               height=\"24\" role=\"img\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                <polygon fill=\"none\" points=\"20 21 12 13.44 4 21 4 3 20 3 20 21\"\r\n                 stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\">\r\n                </polygon>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 좋아요 Count */}\r\n        <div className=\"Post-like-area\">\r\n          <p className=\"Post-like-count\">\r\n            <b>{props.post.likes}</b>\r\n          </p>\r\n        </div>\r\n\r\n        {/* 게시글 영역 */}\r\n        <div className=\"Post-text-area\">\r\n          <div className=\"Post-text\">\r\n            <div className=\"Post-writer-name\">\r\n              <b>\r\n                {\r\n                  props.post.displayName != null && props.post.displayName.length > 0 ?\r\n                    props.post.displayName\r\n                  : props.post.userEmail\r\n                }\r\n              </b>\r\n            </div>\r\n            <div className=\"Post-text-postText\">\r\n              {props.post.postText}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 댓글 카운트에 따라 분기처리 */}\r\n        {\r\n          props.post.replies !== 0 ?\r\n          <>\r\n            {/* 전체보기 기능 구현 시켜야함 */}\r\n            {\r\n              props.post.replies > 2 ?\r\n              <div className=\"Post-reply-count\" onClick={()=>{\r\n                  console.log('댓글 전체보기!')}\r\n                }>{props.post.replies}\r\n              </div>\r\n              : // 댓글 두개 이하면 구분선\r\n              <div className=\"Post-reply-border\"></div>\r\n            }\r\n\r\n            {\r\n              props.post.replies !== 1 ?\r\n              <>\r\n              {/* 댓글 2개 정도 보여주는 영역 */}\r\n              <div className=\"Post-reply-area\">\r\n                <div className=\"Post-reply\">\r\n                  <span className=\"Post-reply-nickname\">\r\n                    <b>{props.post.peopleWhoReply[0].displayName}</b>\r\n                  </span>\r\n                  <span className=\"Post-reply-text\">\r\n                    {props.post.peopleWhoReply[0].replyText}\r\n                  </span>\r\n                </div>\r\n                <div className=\"Post-reply\">\r\n                  <span className=\"Post-reply-nickname\">\r\n                    <b>{props.post.peopleWhoReply[1].displayName}</b>\r\n                  </span>\r\n                  <span className=\"Post-reply-text\">\r\n                    {props.post.peopleWhoReply[1].replyText}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              </>\r\n              : <>\r\n                 <div className=\"Post-reply-area\">\r\n                  <div className=\"Post-reply\">\r\n                    <span className=\"Post-reply-nickname\">\r\n                      <b>{props.post.peopleWhoReply[0].displayName}</b>\r\n                    </span>\r\n                    <span className=\"Post-reply-text\">\r\n                      {props.post.peopleWhoReply[0].replyText}\r\n                    </span>\r\n                  </div>\r\n                 </div>\r\n                </>\r\n            }\r\n          </>\r\n          : null\r\n        }\r\n      </div>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default Post;","/*eslint-disable */\r\n\r\n/**\r\n * 날짜 출력하는 함수\r\n * format: 포매팅 기호 (/,-,. 같은거)\r\n * addMonth: 월 더하기\r\n * addDay: 일 더하기\r\n * addYear: 년 더하기\r\n*/\r\nfunction today(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day;\r\n}\r\n\r\n/**\r\n * unique 숫자 구하기...\r\n*/\r\nfunction GetUniqueNum(format='',addMonth=0,addDay=0,addYear=0){\r\n    let date = new Date();\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth()\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n    let milliseconds = date.getMilliseconds(); // 밀리초\r\n\r\n    if(addMonth!==0){date.setMonth((date.getMonth()+addMonth))};\r\n    if(addDay!==0){date.setDate((date.getDate()+addDay))};\r\n    if(year!==0){date.setFullYear((date.getFullYear()+addYear))};\r\n\r\n    month = (\"0\" + (1 + date.getMonth())).slice(-2);\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n    year = date.getFullYear();\r\n    return year+format+month+format+day+hour+min+milliseconds;\r\n}\r\n\r\n/**\r\n * 오늘 날짜 + 시간 출력하는 함수\r\n * dateFormat: 날짜 포매팅 기호 (/,-,. 같은거)\r\n * timeFormat: 시간 포매팅 기호 (/,-,. 같은거)\r\n*/\r\nfunction GetCurDayTime(dateFormat,timeFormat) {\r\n    return TimeString(dateFormat,timeFormat,new Date());\r\n}\r\n\r\nfunction TimeString (dateFormat='/',timeFormat=':',date) {\r\n        \r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1; // 1월=0,12월=11이므로 1 더함\r\n    let day = date.getDate();\r\n    let hour = date.getHours();\r\n    let min = date.getMinutes();\r\n\r\n    if ((\"\" + month).length === 1) {\r\n        month = \"0\" + month;\r\n    }\r\n    if ((\"\" + day).length === 1) {\r\n        day = \"0\" + day;\r\n    }\r\n    if ((\"\" + hour).length === 1) {\r\n        hour = \"0\" + hour;\r\n    }\r\n    if ((\"\" + min).length === 1) {\r\n        min = \"0\" + min;\r\n    }\r\n\r\n    return (\"\" + year+ dateFormat + month+ dateFormat + day+ \" \" + hour+ timeFormat + min)\r\n}\r\n\r\nexport {today, GetCurDayTime, TimeString, GetUniqueNum } ","/* eslint-disable*/\r\n// 컬렉션을 만들고 데이터를 넘겨주는 작업을 위한 훅\r\nimport { useReducer,useState } from \"react\"\r\nimport { appFireStore, timestamp, storage } from \"../firebase/config\"\r\nimport { addDoc,updateDoc, deleteDoc,doc, collection } from \"firebase/firestore\"\r\nimport { ref, uploadBytesResumable,getDownloadURL } from \"firebase/storage\";\r\nimport  {GetCurDayTime ,GetUniqueNum }  from \"../utils/DateUtil.js\"\r\n\r\n// 우리가 받을 응답을 저장할 객체 (객체이기 때문에 리듀서로 관리)\r\n// 상태를 관리할 때 error나 isPending을 useReducer로 한번에 관리\r\n\r\n/**\r\n * document : 파이어스토어에 document의 생성을 요청하면 우리가 생성한 document를 반환\r\n *      파이어스토어의 데이터 저장 단위\r\n * isPending: 통신중인지 아닌지 상태\r\n * success : 요청에 대한 응답의 성공 유무\r\n */\r\nconst initState = {\r\n    document: null,\r\n    isPending: false,\r\n    error: null,\r\n    success: false\r\n}\r\n\r\n// 전달 받는 action에 따른 state 업데이트\r\nconst storeReducer = (state, action) => {\r\n    /**case 마다 데이터가 다 달라서 spread operator 안쓰고 그냥 적음... */\r\n    switch (action.type) {\r\n        case 'isPending':\r\n            return { isPending: true, document: null,            success: false, error: null }\r\n        case 'addDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'editDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'deleteDoc':\r\n            return { isPending: false, document: action.payload, success: true,  error: null }\r\n        case 'error':\r\n            return { isPending: false, document: null,           success: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// transaction: 우리가 데이터를 저장할 컬렉션(폴더)\r\nexport const useFirestore = (transaction) => {\r\n\r\n    // response에 요청에 대한 firestore 의 응답 저장\r\n    // 저장되는 데이터 === 저장 성공 또는 요청한 문서 데이터(객체)\r\n    const [response, dispatch] = useReducer(storeReducer, initState);\r\n    const [imgUrl,setImgUrl] = useState([]);\r\n    // colRef : 만들 컬랙션의 참조 (컬랙션 이름)\r\n\t\t// 원하는 컬렉션의 참조를 인자로 보내주면 파이어스토어가 자동으로 해당 컬렉션을 생성해줌 \r\n    const colRef = collection(appFireStore, transaction);\r\n\r\n    \r\n    // 컬렉션에 문서를 저장(이미지 저장 시)\r\n    const addDocument = async (doc,pic) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n        // 이미지 업로드 경로 저장\r\n        const storageRef = ref(storage, 'images/'+pic.name );\r\n        const uploadTask = uploadBytesResumable(storageRef, pic);\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n            /*===============================================\r\n             * 이미지 저장\r\n             *===================================================*/\r\n\r\n            uploadTask.on('state_changed', \r\n            (snapshot) => {\r\n                null\r\n            }, \r\n            (error) => {\r\n                console.error('실패사유는', error);\r\n            }, \r\n            () => {\r\n              getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\r\n                \r\n                console.log('업로드된 경로는', downloadURL);\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬랙션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe, downloadURL});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n              });\r\n            }\r\n          );\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에 문서를 저장(댓글 저장)\r\n    const addComment = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬랙션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // 컬렉션에서 문서를 수정\r\n    const editDocument = async (documents,id) => {\r\n        dispatch({ type: \"isPending\" });\r\n        \r\n        // const 임시 = doc(appFireStore,'diary',id);\r\n\r\n        try {\r\n            // // 수정 날짜가 필요할 경우 사용하면 됨\r\n            // const createdTime = timestamp.fromDate(new Date());\r\n            // const createdDate = GetCurDayTime('/',':');\r\n\r\n            // docRef : 참조(컬랙션 이름)\r\n            // updateDoc : 컬렉션에 있는 문서 수정\r\n            // const docRef = await updateDoc(doc(colRef,id),{ ...documents, createdTime,createdDate});\r\n            const docRef = await updateDoc(doc(colRef,id),{ ...documents});\r\n            dispatch({ type: 'editDoc', payload: docRef });\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n        \r\n    // 컬렉션에서 문서를 삭제\r\n    const deleteDocument = async (id) => {\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n            const docRef = await deleteDoc(doc(colRef,id));\r\n            dispatch({ type: 'deleteDoc', payload: docRef });\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n    }\r\n\r\n    \r\n    // 유저 최초 저장\r\n    const addUser = async (doc) => {\r\n\r\n        // 시간 저장(order by 용)\r\n        const createdTime = timestamp.fromDate(new Date());\r\n        const createdDate = GetCurDayTime('/',':');\r\n\r\n        // 유일키 저장\r\n        const createdUqe = GetUniqueNum();\r\n\r\n\r\n        dispatch({ type: \"isPending\" });\r\n        try {\r\n\r\n                /*===============================================\r\n                * 데이터 저장\r\n                *===================================================*/\r\n                // docRef : 참조(컬랙션 이름)\r\n                // addDoc : 컬렉션에 문서를 추가\r\n                const docRef = addDoc(colRef,{ ...doc, createdTime, createdDate,createdUqe});\r\n                console.log(docRef);\r\n\r\n                dispatch({ type: 'addDoc', payload: docRef });\r\n                console.log('저장완료');               \r\n\r\n\r\n        } catch (error) {\r\n            dispatch({ type: 'error', payload: error.message });\r\n        }\r\n\r\n    }\r\n\r\n    return { addDocument,addComment, editDocument, deleteDocument, addUser, response }\r\n\r\n}"],"names":["postList","useSelector","state","feeds","transaction","useState","documents","setDocuments","error","setError","useEffect","q","query","collection","appFireStore","orderBy","unsubscribe","onSnapshot","snapshot","result","docs","forEach","doc","push","data","id","message","useCollection","fade","setFade","dispatch","useDispatch","console","log","length","users","map","a","i","UID","Name","displayName","uniqUsers","reduce","acc","cur","findIndex","setUserList","className","post","Post","props","likeYN","useFirestore","editDocument","response","useAuthContext","user","isAuthReady","timer","setTimeout","clearTimeout","src","profileImage","alt","userEmail","downloadURL","onClick","e","likes","isLiked","peopleWhoLike","includes","uid","filter","color","fill","height","role","viewBox","width","d","alert","stroke","strokeLinejoin","strokeWidth","x1","x2","y1","y2","points","strokeLinecap","postText","replies","peopleWhoReply","replyText","GetUniqueNum","format","addMonth","addDay","addYear","date","Date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","min","getMinutes","milliseconds","getMilliseconds","setMonth","setDate","setFullYear","slice","GetCurDayTime","dateFormat","timeFormat","TimeString","initState","document","isPending","success","storeReducer","action","type","payload","useReducer","colRef","addDocument","pic","createdTime","timestamp","createdDate","createdUqe","storageRef","ref","storage","name","uploadTask","uploadBytesResumable","on","getDownloadURL","then","docRef","addDoc","addComment","updateDoc","deleteDocument","deleteDoc","addUser"],"sourceRoot":""}