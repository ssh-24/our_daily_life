{"version":3,"file":"static/js/194.092bd098.chunk.js","mappings":"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","sources":["components/Profile.js","hooks/useCollectionDtl.js"],"sourcesContent":["/*eslint-disable */\r\nimport { useState, useEffect } from 'react';\r\nimport { useAuthContext } from '../hooks/useAuthContext';\r\nimport { useCollectionDtl } from '../hooks/useCollectionDtl';\r\nimport { setVisible } from \"../store/inputSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction Profile(props) {\r\n    const {user} = useAuthContext()\r\n    const {documents,error} = useCollectionDtl(\"FeedData\",[\"UID\",\"==\",user.uid])\r\n    const [docReady, setDocReady] = useState(false)\r\n    const loginUserInfo = useSelector((state) => state.loginUserInfo) // 로그인 유저 정보\r\n    let [fade, setFade] = useState('') // Animation Style State\r\n    let dispatch = useDispatch()\r\n    \r\n    // 프로필 사진 변경\r\n    const profileChange = () => {\r\n        // 로직 구현해야 함..\r\n        window.blur()\r\n        alert(\"기능 구현 중 ^.^\")\r\n    }\r\n\r\n    // 게시물 등록\r\n    const uploadClicked = () => {\r\n        dispatch(setVisible(true)) // 새 게시물 등록 모달 보이게\r\n    }\r\n\r\n    useEffect(()=>{\r\n        // documents 여부 state 변경\r\n        setDocReady(false)\r\n        console.log(\"user :\",user)\r\n        console.log(\"이메일 :\",user.email)\r\n        console.log(\"닉네임 :\",user.displayName)\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        // documents 여부 state 변경\r\n        setDocReady(true)\r\n        console.log(\"내 글 :\",documents)\r\n    },[documents])\r\n\r\n    useEffect(()=>{\r\n        setFade(docReady? 'transition-end': '') // 애니메이션 효과\r\n    },[docReady])\r\n\r\n\r\n    return (\r\n        <>\r\n            <section>\r\n                <div className={`container transition-start ${fade}`}>\r\n                    <div className='container-wrap'>\r\n                        <img className=\"profile-img\" src={loginUserInfo.profileImage} alt=\"프로필 사진\"/>\r\n                        <div className=\"profile-info\">\r\n                            <h3>{user.email}</h3>\r\n                            <h4>@{user.displayName}</h4>\r\n                            <p>\r\n                                {loginUserInfo.profileIntro}\r\n                                {/* 소개글 내용이 짧을 때 줄어드는 거 막아야 할 듯*/}\r\n                            </p>\r\n                            <button onClick={(e)=>{\r\n                                e.preventDefault()\r\n                                profileChange()\r\n                            }}>프로필 변경</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={`content-list transition-start ${fade}`}>\r\n                    <div className='content-wrap'>\r\n                        {\r\n                            docReady && documents != null && documents.length !== 0\r\n                            ? documents.map((a,i)=>{\r\n                                return (\r\n                                    <img key={i} src={a.downloadURL} alt='#' onClick={()=>{\r\n                                        // 상세 화면으로 이동하도록 기능 구현해야 함!\r\n                                        console.log(a);\r\n                                    }}/>\r\n                                )\r\n                            })\r\n                            : <div className=\"no-post\">\r\n                                <p>작성된 게시물이 없어요!</p>\r\n                                <button className=\"upload-btn-profile\" onClick={uploadClicked}>\r\n                                    게시물 작성하기\r\n                                </button>\r\n                              </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile;","/* eslint-disable*/\r\n\r\n// 컬렉션에 접근하여 데이터를 불러오는 기능을 위한 훅\r\n// 메인화면 외에 사용\r\nimport { appFireStore } from \"../firebase/config\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { onSnapshot,collection,query,where,orderBy } from \"firebase/firestore\";\r\n\r\nexport const useCollectionDtl = (transaction, myQuery, order=\"\") => { // myQuery: 파이어스토어 쿼리 사용을 위한 파라미터\r\n\r\n    // documents 데이터 관리, error 관리\r\n    const [documents, setDocuments] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    // 💛 collection에 변화가 생길때마다 실행합니다. 때문에 항상 최신의 컬랙션 상태를 반환 받을 수 있습니다.\r\n    useEffect(() => {\r\n        let q;\r\n        if(order.length>0){\r\n            q = query(collection(appFireStore, transaction),where(...myQuery),orderBy(\"createdTime\",\"desc\"));\r\n        }\r\n        else{\r\n            q = query(collection(appFireStore, transaction),where(...myQuery));\r\n        }\r\n\r\n        console.log(q);\r\n        // onSnapshot: 가장 최근 컬랙션의 내용 반환 \r\n        // unsubscribe: 데이터 수신을 중단(데이터 오는거 기다릴 필요가 없을때 사용.)\r\n        const unsubscribe = onSnapshot(myQuery ? q : (collection(appFireStore, transaction)),\r\n            \r\n            // 응답받은 컬랙션을 snapshot에 저장\r\n            (snapshot) => {\r\n                let result = [];\r\n                // 배열형태로 저장되어있음 => forEach 사용\r\n                snapshot.docs.forEach((doc) => {\r\n                    // document 데이터랑 id 값 push 해주기\r\n                    result.push({ ...doc.data(), id: doc.id });\r\n                })\r\n                console.log(result);\r\n                setDocuments(result);\r\n                setError(null);\r\n            },\r\n            (error) => {\r\n                setError(error.message);\r\n            });\r\n            \r\n        //💛 외부에서 데이터를 구독하는 경우 clean-up 함수는 useEffect훅을 사용하는 컴포넌트가 마운트 해제될때 실행되어 구독을 종료하게 됩니다.\r\n        return unsubscribe; // clean-up 함수\r\n\r\n    }, [collection])// 매번 실행될 필요가 없고, 컬랙션 변화가 \r\n    return { documents, error }\r\n}"],"names":["props","user","useAuthContext","useCollectionDtl","uid","documents","error","useState","docReady","setDocReady","loginUserInfo","useSelector","state","fade","setFade","dispatch","useDispatch","useEffect","console","log","email","displayName","className","src","profileImage","alt","profileIntro","onClick","e","preventDefault","window","blur","alert","length","map","a","i","downloadURL","setVisible","transaction","myQuery","order","setDocuments","setError","q","query","collection","appFireStore","where","orderBy","unsubscribe","onSnapshot","snapshot","result","docs","forEach","doc","push","data","id","message"],"sourceRoot":""}